/*
 * Commerce Webservices v2
 * These services manage all of the common commerce functionality, and also include customizations from installed AddOns.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockwell.cif.connector.hybris.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Pagination info
 */
@ApiModel(description = "Pagination info")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-23T22:16:40.723Z")



public class Pagination {
  @SerializedName("count")
  private Integer count = null;

  @SerializedName("hasNext")
  private Boolean hasNext = null;

  @SerializedName("hasPrevious")
  private Boolean hasPrevious = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("totalCount")
  private Long totalCount = null;

  @SerializedName("totalPages")
  private Integer totalPages = null;

  public Pagination count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Number of elements on this page
   * @return count
  **/
  @ApiModelProperty(value = "Number of elements on this page")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public Pagination hasNext(Boolean hasNext) {
    this.hasNext = hasNext;
    return this;
  }

   /**
   * Indicates if there is next page
   * @return hasNext
  **/
  @ApiModelProperty(value = "Indicates if there is next page")
  public Boolean isHasNext() {
    return hasNext;
  }

  public void setHasNext(Boolean hasNext) {
    this.hasNext = hasNext;
  }

  public Pagination hasPrevious(Boolean hasPrevious) {
    this.hasPrevious = hasPrevious;
    return this;
  }

   /**
   * Indicates if there is previous page
   * @return hasPrevious
  **/
  @ApiModelProperty(value = "Indicates if there is previous page")
  public Boolean isHasPrevious() {
    return hasPrevious;
  }

  public void setHasPrevious(Boolean hasPrevious) {
    this.hasPrevious = hasPrevious;
  }

  public Pagination page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Current page number
   * @return page
  **/
  @ApiModelProperty(value = "Current page number")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public Pagination totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Total number of elements
   * @return totalCount
  **/
  @ApiModelProperty(value = "Total number of elements")
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }

  public Pagination totalPages(Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

   /**
   * Total number of pages
   * @return totalPages
  **/
  @ApiModelProperty(value = "Total number of pages")
  public Integer getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pagination pagination = (Pagination) o;
    return Objects.equals(this.count, pagination.count) &&
        Objects.equals(this.hasNext, pagination.hasNext) &&
        Objects.equals(this.hasPrevious, pagination.hasPrevious) &&
        Objects.equals(this.page, pagination.page) &&
        Objects.equals(this.totalCount, pagination.totalCount) &&
        Objects.equals(this.totalPages, pagination.totalPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, hasNext, hasPrevious, page, totalCount, totalPages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pagination {\n");
    
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    hasNext: ").append(toIndentedString(hasNext)).append("\n");
    sb.append("    hasPrevious: ").append(toIndentedString(hasPrevious)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

