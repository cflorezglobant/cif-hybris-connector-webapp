/*
 * Commerce Webservices v2
 * These services manage all of the common commerce functionality, and also include customizations from installed AddOns.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockwell.cif.connector.hybris.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Representation of a Cart
 */
@ApiModel(description = "Representation of a Cart")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-23T22:16:40.723Z")



public class Cart {
  @SerializedName("appliedOrderPromotions")
  private List<PromotionResult> appliedOrderPromotions = null;

  @SerializedName("appliedProductPromotions")
  private List<PromotionResult> appliedProductPromotions = null;

  @SerializedName("appliedVouchers")
  private List<Voucher> appliedVouchers = null;

  @SerializedName("calculated")
  private Boolean calculated = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("costCenter")
  private B2BCostCenter costCenter = null;

  @SerializedName("deliveryAddress")
  private Address deliveryAddress = null;

  @SerializedName("deliveryCost")
  private Price deliveryCost = null;

  @SerializedName("deliveryItemsQuantity")
  private Long deliveryItemsQuantity = null;

  @SerializedName("deliveryMode")
  private DeliveryMode deliveryMode = null;

  @SerializedName("deliveryOrderGroups")
  private List<DeliveryOrderEntryGroup> deliveryOrderGroups = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("entries")
  private List<OrderEntry> entries = null;

  @SerializedName("expirationTime")
  private OffsetDateTime expirationTime = null;

  @SerializedName("guid")
  private String guid = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("net")
  private Boolean net = null;

  @SerializedName("orderDiscounts")
  private Price orderDiscounts = null;

  @SerializedName("paymentInfo")
  private PaymentDetails paymentInfo = null;

  @SerializedName("paymentType")
  private B2BPaymentTypeData paymentType = null;

  @SerializedName("pickupItemsQuantity")
  private Long pickupItemsQuantity = null;

  @SerializedName("pickupOrderGroups")
  private List<PickupOrderEntryGroup> pickupOrderGroups = null;

  @SerializedName("potentialOrderPromotions")
  private List<PromotionResult> potentialOrderPromotions = null;

  @SerializedName("potentialProductPromotions")
  private List<PromotionResult> potentialProductPromotions = null;

  @SerializedName("productDiscounts")
  private Price productDiscounts = null;

  @SerializedName("purchaseOrderNumber")
  private String purchaseOrderNumber = null;

  @SerializedName("saveTime")
  private OffsetDateTime saveTime = null;

  @SerializedName("savedBy")
  private Principal savedBy = null;

  @SerializedName("site")
  private String site = null;

  @SerializedName("store")
  private String store = null;

  @SerializedName("subTotal")
  private Price subTotal = null;

  @SerializedName("totalDiscounts")
  private Price totalDiscounts = null;

  @SerializedName("totalItems")
  private Integer totalItems = null;

  @SerializedName("totalPrice")
  private Price totalPrice = null;

  @SerializedName("totalPriceWithTax")
  private Price totalPriceWithTax = null;

  @SerializedName("totalTax")
  private Price totalTax = null;

  @SerializedName("totalUnitCount")
  private Integer totalUnitCount = null;

  @SerializedName("user")
  private Principal user = null;

  public Cart appliedOrderPromotions(List<PromotionResult> appliedOrderPromotions) {
    this.appliedOrderPromotions = appliedOrderPromotions;
    return this;
  }

  public Cart addAppliedOrderPromotionsItem(PromotionResult appliedOrderPromotionsItem) {
    if (this.appliedOrderPromotions == null) {
      this.appliedOrderPromotions = new ArrayList<PromotionResult>();
    }
    this.appliedOrderPromotions.add(appliedOrderPromotionsItem);
    return this;
  }

   /**
   * List of applied order promotions
   * @return appliedOrderPromotions
  **/
  @ApiModelProperty(value = "List of applied order promotions")
  public List<PromotionResult> getAppliedOrderPromotions() {
    return appliedOrderPromotions;
  }

  public void setAppliedOrderPromotions(List<PromotionResult> appliedOrderPromotions) {
    this.appliedOrderPromotions = appliedOrderPromotions;
  }

  public Cart appliedProductPromotions(List<PromotionResult> appliedProductPromotions) {
    this.appliedProductPromotions = appliedProductPromotions;
    return this;
  }

  public Cart addAppliedProductPromotionsItem(PromotionResult appliedProductPromotionsItem) {
    if (this.appliedProductPromotions == null) {
      this.appliedProductPromotions = new ArrayList<PromotionResult>();
    }
    this.appliedProductPromotions.add(appliedProductPromotionsItem);
    return this;
  }

   /**
   * List of applied product promotions
   * @return appliedProductPromotions
  **/
  @ApiModelProperty(value = "List of applied product promotions")
  public List<PromotionResult> getAppliedProductPromotions() {
    return appliedProductPromotions;
  }

  public void setAppliedProductPromotions(List<PromotionResult> appliedProductPromotions) {
    this.appliedProductPromotions = appliedProductPromotions;
  }

  public Cart appliedVouchers(List<Voucher> appliedVouchers) {
    this.appliedVouchers = appliedVouchers;
    return this;
  }

  public Cart addAppliedVouchersItem(Voucher appliedVouchersItem) {
    if (this.appliedVouchers == null) {
      this.appliedVouchers = new ArrayList<Voucher>();
    }
    this.appliedVouchers.add(appliedVouchersItem);
    return this;
  }

   /**
   * List of applied vouchers
   * @return appliedVouchers
  **/
  @ApiModelProperty(value = "List of applied vouchers")
  public List<Voucher> getAppliedVouchers() {
    return appliedVouchers;
  }

  public void setAppliedVouchers(List<Voucher> appliedVouchers) {
    this.appliedVouchers = appliedVouchers;
  }

  public Cart calculated(Boolean calculated) {
    this.calculated = calculated;
    return this;
  }

   /**
   * Flag showing if order is calculated
   * @return calculated
  **/
  @ApiModelProperty(value = "Flag showing if order is calculated")
  public Boolean isCalculated() {
    return calculated;
  }

  public void setCalculated(Boolean calculated) {
    this.calculated = calculated;
  }

  public Cart code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Code number of order
   * @return code
  **/
  @ApiModelProperty(value = "Code number of order")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Cart costCenter(B2BCostCenter costCenter) {
    this.costCenter = costCenter;
    return this;
  }

   /**
   * Get costCenter
   * @return costCenter
  **/
  @ApiModelProperty(value = "")
  public B2BCostCenter getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(B2BCostCenter costCenter) {
    this.costCenter = costCenter;
  }

  public Cart deliveryAddress(Address deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
    return this;
  }

   /**
   * Delivery address
   * @return deliveryAddress
  **/
  @ApiModelProperty(value = "Delivery address")
  public Address getDeliveryAddress() {
    return deliveryAddress;
  }

  public void setDeliveryAddress(Address deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }

  public Cart deliveryCost(Price deliveryCost) {
    this.deliveryCost = deliveryCost;
    return this;
  }

   /**
   * Delivery cost
   * @return deliveryCost
  **/
  @ApiModelProperty(value = "Delivery cost")
  public Price getDeliveryCost() {
    return deliveryCost;
  }

  public void setDeliveryCost(Price deliveryCost) {
    this.deliveryCost = deliveryCost;
  }

  public Cart deliveryItemsQuantity(Long deliveryItemsQuantity) {
    this.deliveryItemsQuantity = deliveryItemsQuantity;
    return this;
  }

   /**
   * Quantity of delivery items
   * @return deliveryItemsQuantity
  **/
  @ApiModelProperty(value = "Quantity of delivery items")
  public Long getDeliveryItemsQuantity() {
    return deliveryItemsQuantity;
  }

  public void setDeliveryItemsQuantity(Long deliveryItemsQuantity) {
    this.deliveryItemsQuantity = deliveryItemsQuantity;
  }

  public Cart deliveryMode(DeliveryMode deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

   /**
   * Delivery mode information
   * @return deliveryMode
  **/
  @ApiModelProperty(value = "Delivery mode information")
  public DeliveryMode getDeliveryMode() {
    return deliveryMode;
  }

  public void setDeliveryMode(DeliveryMode deliveryMode) {
    this.deliveryMode = deliveryMode;
  }

  public Cart deliveryOrderGroups(List<DeliveryOrderEntryGroup> deliveryOrderGroups) {
    this.deliveryOrderGroups = deliveryOrderGroups;
    return this;
  }

  public Cart addDeliveryOrderGroupsItem(DeliveryOrderEntryGroup deliveryOrderGroupsItem) {
    if (this.deliveryOrderGroups == null) {
      this.deliveryOrderGroups = new ArrayList<DeliveryOrderEntryGroup>();
    }
    this.deliveryOrderGroups.add(deliveryOrderGroupsItem);
    return this;
  }

   /**
   * List of delivery order entries group
   * @return deliveryOrderGroups
  **/
  @ApiModelProperty(value = "List of delivery order entries group")
  public List<DeliveryOrderEntryGroup> getDeliveryOrderGroups() {
    return deliveryOrderGroups;
  }

  public void setDeliveryOrderGroups(List<DeliveryOrderEntryGroup> deliveryOrderGroups) {
    this.deliveryOrderGroups = deliveryOrderGroups;
  }

  public Cart description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the cart
   * @return description
  **/
  @ApiModelProperty(value = "Description of the cart")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Cart entries(List<OrderEntry> entries) {
    this.entries = entries;
    return this;
  }

  public Cart addEntriesItem(OrderEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<OrderEntry>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * List of order entries
   * @return entries
  **/
  @ApiModelProperty(value = "List of order entries")
  public List<OrderEntry> getEntries() {
    return entries;
  }

  public void setEntries(List<OrderEntry> entries) {
    this.entries = entries;
  }

  public Cart expirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

   /**
   * Date of cart expiration time
   * @return expirationTime
  **/
  @ApiModelProperty(value = "Date of cart expiration time")
  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }

  public Cart guid(String guid) {
    this.guid = guid;
    return this;
  }

   /**
   * Guest user id identifier
   * @return guid
  **/
  @ApiModelProperty(value = "Guest user id identifier")
  public String getGuid() {
    return guid;
  }

  public void setGuid(String guid) {
    this.guid = guid;
  }

  public Cart name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the cart
   * @return name
  **/
  @ApiModelProperty(value = "Name of the cart")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Cart net(Boolean net) {
    this.net = net;
    return this;
  }

   /**
   * Flag stating iv value is net-value
   * @return net
  **/
  @ApiModelProperty(value = "Flag stating iv value is net-value")
  public Boolean isNet() {
    return net;
  }

  public void setNet(Boolean net) {
    this.net = net;
  }

  public Cart orderDiscounts(Price orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
    return this;
  }

   /**
   * Order discounts
   * @return orderDiscounts
  **/
  @ApiModelProperty(value = "Order discounts")
  public Price getOrderDiscounts() {
    return orderDiscounts;
  }

  public void setOrderDiscounts(Price orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
  }

  public Cart paymentInfo(PaymentDetails paymentInfo) {
    this.paymentInfo = paymentInfo;
    return this;
  }

   /**
   * Payment information
   * @return paymentInfo
  **/
  @ApiModelProperty(value = "Payment information")
  public PaymentDetails getPaymentInfo() {
    return paymentInfo;
  }

  public void setPaymentInfo(PaymentDetails paymentInfo) {
    this.paymentInfo = paymentInfo;
  }

  public Cart paymentType(B2BPaymentTypeData paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @ApiModelProperty(value = "")
  public B2BPaymentTypeData getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(B2BPaymentTypeData paymentType) {
    this.paymentType = paymentType;
  }

  public Cart pickupItemsQuantity(Long pickupItemsQuantity) {
    this.pickupItemsQuantity = pickupItemsQuantity;
    return this;
  }

   /**
   * Quantity of pickup items
   * @return pickupItemsQuantity
  **/
  @ApiModelProperty(value = "Quantity of pickup items")
  public Long getPickupItemsQuantity() {
    return pickupItemsQuantity;
  }

  public void setPickupItemsQuantity(Long pickupItemsQuantity) {
    this.pickupItemsQuantity = pickupItemsQuantity;
  }

  public Cart pickupOrderGroups(List<PickupOrderEntryGroup> pickupOrderGroups) {
    this.pickupOrderGroups = pickupOrderGroups;
    return this;
  }

  public Cart addPickupOrderGroupsItem(PickupOrderEntryGroup pickupOrderGroupsItem) {
    if (this.pickupOrderGroups == null) {
      this.pickupOrderGroups = new ArrayList<PickupOrderEntryGroup>();
    }
    this.pickupOrderGroups.add(pickupOrderGroupsItem);
    return this;
  }

   /**
   * List of pickup order entry group
   * @return pickupOrderGroups
  **/
  @ApiModelProperty(value = "List of pickup order entry group")
  public List<PickupOrderEntryGroup> getPickupOrderGroups() {
    return pickupOrderGroups;
  }

  public void setPickupOrderGroups(List<PickupOrderEntryGroup> pickupOrderGroups) {
    this.pickupOrderGroups = pickupOrderGroups;
  }

  public Cart potentialOrderPromotions(List<PromotionResult> potentialOrderPromotions) {
    this.potentialOrderPromotions = potentialOrderPromotions;
    return this;
  }

  public Cart addPotentialOrderPromotionsItem(PromotionResult potentialOrderPromotionsItem) {
    if (this.potentialOrderPromotions == null) {
      this.potentialOrderPromotions = new ArrayList<PromotionResult>();
    }
    this.potentialOrderPromotions.add(potentialOrderPromotionsItem);
    return this;
  }

   /**
   * List of potential order promotions for cart
   * @return potentialOrderPromotions
  **/
  @ApiModelProperty(value = "List of potential order promotions for cart")
  public List<PromotionResult> getPotentialOrderPromotions() {
    return potentialOrderPromotions;
  }

  public void setPotentialOrderPromotions(List<PromotionResult> potentialOrderPromotions) {
    this.potentialOrderPromotions = potentialOrderPromotions;
  }

  public Cart potentialProductPromotions(List<PromotionResult> potentialProductPromotions) {
    this.potentialProductPromotions = potentialProductPromotions;
    return this;
  }

  public Cart addPotentialProductPromotionsItem(PromotionResult potentialProductPromotionsItem) {
    if (this.potentialProductPromotions == null) {
      this.potentialProductPromotions = new ArrayList<PromotionResult>();
    }
    this.potentialProductPromotions.add(potentialProductPromotionsItem);
    return this;
  }

   /**
   * List of potential product promotions for cart
   * @return potentialProductPromotions
  **/
  @ApiModelProperty(value = "List of potential product promotions for cart")
  public List<PromotionResult> getPotentialProductPromotions() {
    return potentialProductPromotions;
  }

  public void setPotentialProductPromotions(List<PromotionResult> potentialProductPromotions) {
    this.potentialProductPromotions = potentialProductPromotions;
  }

  public Cart productDiscounts(Price productDiscounts) {
    this.productDiscounts = productDiscounts;
    return this;
  }

   /**
   * Product discounts
   * @return productDiscounts
  **/
  @ApiModelProperty(value = "Product discounts")
  public Price getProductDiscounts() {
    return productDiscounts;
  }

  public void setProductDiscounts(Price productDiscounts) {
    this.productDiscounts = productDiscounts;
  }

  public Cart purchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
    return this;
  }

   /**
   * Get purchaseOrderNumber
   * @return purchaseOrderNumber
  **/
  @ApiModelProperty(value = "")
  public String getPurchaseOrderNumber() {
    return purchaseOrderNumber;
  }

  public void setPurchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
  }

  public Cart saveTime(OffsetDateTime saveTime) {
    this.saveTime = saveTime;
    return this;
  }

   /**
   * Date of saving cart
   * @return saveTime
  **/
  @ApiModelProperty(value = "Date of saving cart")
  public OffsetDateTime getSaveTime() {
    return saveTime;
  }

  public void setSaveTime(OffsetDateTime saveTime) {
    this.saveTime = saveTime;
  }

  public Cart savedBy(Principal savedBy) {
    this.savedBy = savedBy;
    return this;
  }

   /**
   * Information about person who saved cart
   * @return savedBy
  **/
  @ApiModelProperty(value = "Information about person who saved cart")
  public Principal getSavedBy() {
    return savedBy;
  }

  public void setSavedBy(Principal savedBy) {
    this.savedBy = savedBy;
  }

  public Cart site(String site) {
    this.site = site;
    return this;
  }

   /**
   * Site
   * @return site
  **/
  @ApiModelProperty(value = "Site")
  public String getSite() {
    return site;
  }

  public void setSite(String site) {
    this.site = site;
  }

  public Cart store(String store) {
    this.store = store;
    return this;
  }

   /**
   * Store
   * @return store
  **/
  @ApiModelProperty(value = "Store")
  public String getStore() {
    return store;
  }

  public void setStore(String store) {
    this.store = store;
  }

  public Cart subTotal(Price subTotal) {
    this.subTotal = subTotal;
    return this;
  }

   /**
   * Subtotal price
   * @return subTotal
  **/
  @ApiModelProperty(value = "Subtotal price")
  public Price getSubTotal() {
    return subTotal;
  }

  public void setSubTotal(Price subTotal) {
    this.subTotal = subTotal;
  }

  public Cart totalDiscounts(Price totalDiscounts) {
    this.totalDiscounts = totalDiscounts;
    return this;
  }

   /**
   * Total discounts
   * @return totalDiscounts
  **/
  @ApiModelProperty(value = "Total discounts")
  public Price getTotalDiscounts() {
    return totalDiscounts;
  }

  public void setTotalDiscounts(Price totalDiscounts) {
    this.totalDiscounts = totalDiscounts;
  }

  public Cart totalItems(Integer totalItems) {
    this.totalItems = totalItems;
    return this;
  }

   /**
   * Get totalItems
   * @return totalItems
  **/
  @ApiModelProperty(value = "")
  public Integer getTotalItems() {
    return totalItems;
  }

  public void setTotalItems(Integer totalItems) {
    this.totalItems = totalItems;
  }

  public Cart totalPrice(Price totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

   /**
   * Total price value
   * @return totalPrice
  **/
  @ApiModelProperty(value = "Total price value")
  public Price getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Price totalPrice) {
    this.totalPrice = totalPrice;
  }

  public Cart totalPriceWithTax(Price totalPriceWithTax) {
    this.totalPriceWithTax = totalPriceWithTax;
    return this;
  }

   /**
   * Total price with tax
   * @return totalPriceWithTax
  **/
  @ApiModelProperty(value = "Total price with tax")
  public Price getTotalPriceWithTax() {
    return totalPriceWithTax;
  }

  public void setTotalPriceWithTax(Price totalPriceWithTax) {
    this.totalPriceWithTax = totalPriceWithTax;
  }

  public Cart totalTax(Price totalTax) {
    this.totalTax = totalTax;
    return this;
  }

   /**
   * Total tax price
   * @return totalTax
  **/
  @ApiModelProperty(value = "Total tax price")
  public Price getTotalTax() {
    return totalTax;
  }

  public void setTotalTax(Price totalTax) {
    this.totalTax = totalTax;
  }

  public Cart totalUnitCount(Integer totalUnitCount) {
    this.totalUnitCount = totalUnitCount;
    return this;
  }

   /**
   * Total unit count
   * @return totalUnitCount
  **/
  @ApiModelProperty(value = "Total unit count")
  public Integer getTotalUnitCount() {
    return totalUnitCount;
  }

  public void setTotalUnitCount(Integer totalUnitCount) {
    this.totalUnitCount = totalUnitCount;
  }

  public Cart user(Principal user) {
    this.user = user;
    return this;
  }

   /**
   * User information
   * @return user
  **/
  @ApiModelProperty(value = "User information")
  public Principal getUser() {
    return user;
  }

  public void setUser(Principal user) {
    this.user = user;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.appliedOrderPromotions, cart.appliedOrderPromotions) &&
        Objects.equals(this.appliedProductPromotions, cart.appliedProductPromotions) &&
        Objects.equals(this.appliedVouchers, cart.appliedVouchers) &&
        Objects.equals(this.calculated, cart.calculated) &&
        Objects.equals(this.code, cart.code) &&
        Objects.equals(this.costCenter, cart.costCenter) &&
        Objects.equals(this.deliveryAddress, cart.deliveryAddress) &&
        Objects.equals(this.deliveryCost, cart.deliveryCost) &&
        Objects.equals(this.deliveryItemsQuantity, cart.deliveryItemsQuantity) &&
        Objects.equals(this.deliveryMode, cart.deliveryMode) &&
        Objects.equals(this.deliveryOrderGroups, cart.deliveryOrderGroups) &&
        Objects.equals(this.description, cart.description) &&
        Objects.equals(this.entries, cart.entries) &&
        Objects.equals(this.expirationTime, cart.expirationTime) &&
        Objects.equals(this.guid, cart.guid) &&
        Objects.equals(this.name, cart.name) &&
        Objects.equals(this.net, cart.net) &&
        Objects.equals(this.orderDiscounts, cart.orderDiscounts) &&
        Objects.equals(this.paymentInfo, cart.paymentInfo) &&
        Objects.equals(this.paymentType, cart.paymentType) &&
        Objects.equals(this.pickupItemsQuantity, cart.pickupItemsQuantity) &&
        Objects.equals(this.pickupOrderGroups, cart.pickupOrderGroups) &&
        Objects.equals(this.potentialOrderPromotions, cart.potentialOrderPromotions) &&
        Objects.equals(this.potentialProductPromotions, cart.potentialProductPromotions) &&
        Objects.equals(this.productDiscounts, cart.productDiscounts) &&
        Objects.equals(this.purchaseOrderNumber, cart.purchaseOrderNumber) &&
        Objects.equals(this.saveTime, cart.saveTime) &&
        Objects.equals(this.savedBy, cart.savedBy) &&
        Objects.equals(this.site, cart.site) &&
        Objects.equals(this.store, cart.store) &&
        Objects.equals(this.subTotal, cart.subTotal) &&
        Objects.equals(this.totalDiscounts, cart.totalDiscounts) &&
        Objects.equals(this.totalItems, cart.totalItems) &&
        Objects.equals(this.totalPrice, cart.totalPrice) &&
        Objects.equals(this.totalPriceWithTax, cart.totalPriceWithTax) &&
        Objects.equals(this.totalTax, cart.totalTax) &&
        Objects.equals(this.totalUnitCount, cart.totalUnitCount) &&
        Objects.equals(this.user, cart.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedOrderPromotions, appliedProductPromotions, appliedVouchers, calculated, code, costCenter, deliveryAddress, deliveryCost, deliveryItemsQuantity, deliveryMode, deliveryOrderGroups, description, entries, expirationTime, guid, name, net, orderDiscounts, paymentInfo, paymentType, pickupItemsQuantity, pickupOrderGroups, potentialOrderPromotions, potentialProductPromotions, productDiscounts, purchaseOrderNumber, saveTime, savedBy, site, store, subTotal, totalDiscounts, totalItems, totalPrice, totalPriceWithTax, totalTax, totalUnitCount, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    
    sb.append("    appliedOrderPromotions: ").append(toIndentedString(appliedOrderPromotions)).append("\n");
    sb.append("    appliedProductPromotions: ").append(toIndentedString(appliedProductPromotions)).append("\n");
    sb.append("    appliedVouchers: ").append(toIndentedString(appliedVouchers)).append("\n");
    sb.append("    calculated: ").append(toIndentedString(calculated)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    deliveryCost: ").append(toIndentedString(deliveryCost)).append("\n");
    sb.append("    deliveryItemsQuantity: ").append(toIndentedString(deliveryItemsQuantity)).append("\n");
    sb.append("    deliveryMode: ").append(toIndentedString(deliveryMode)).append("\n");
    sb.append("    deliveryOrderGroups: ").append(toIndentedString(deliveryOrderGroups)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    orderDiscounts: ").append(toIndentedString(orderDiscounts)).append("\n");
    sb.append("    paymentInfo: ").append(toIndentedString(paymentInfo)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    pickupItemsQuantity: ").append(toIndentedString(pickupItemsQuantity)).append("\n");
    sb.append("    pickupOrderGroups: ").append(toIndentedString(pickupOrderGroups)).append("\n");
    sb.append("    potentialOrderPromotions: ").append(toIndentedString(potentialOrderPromotions)).append("\n");
    sb.append("    potentialProductPromotions: ").append(toIndentedString(potentialProductPromotions)).append("\n");
    sb.append("    productDiscounts: ").append(toIndentedString(productDiscounts)).append("\n");
    sb.append("    purchaseOrderNumber: ").append(toIndentedString(purchaseOrderNumber)).append("\n");
    sb.append("    saveTime: ").append(toIndentedString(saveTime)).append("\n");
    sb.append("    savedBy: ").append(toIndentedString(savedBy)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    store: ").append(toIndentedString(store)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    totalDiscounts: ").append(toIndentedString(totalDiscounts)).append("\n");
    sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    totalPriceWithTax: ").append(toIndentedString(totalPriceWithTax)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    totalUnitCount: ").append(toIndentedString(totalUnitCount)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

