/*
 * Commerce Webservices v2
 * These services manage all of the common commerce functionality, and also include customizations from installed AddOns.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockwell.cif.connector.hybris.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * Representation of a Price
 */
@ApiModel(description = "Representation of a Price")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-23T22:16:40.723Z")



public class Price {
  @SerializedName("currencyIso")
  private String currencyIso = null;

  @SerializedName("formattedValue")
  private String formattedValue = null;

  @SerializedName("maxQuantity")
  private Long maxQuantity = null;

  @SerializedName("minQuantity")
  private Long minQuantity = null;

  /**
   * Type of the price
   */
  @JsonAdapter(PriceTypeEnum.Adapter.class)
  public enum PriceTypeEnum {
    BUY("BUY"),
    
    FROM("FROM");

    private String value;

    PriceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriceTypeEnum fromValue(String text) {
      for (PriceTypeEnum b : PriceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PriceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PriceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("priceType")
  private PriceTypeEnum priceType = null;

  @SerializedName("value")
  private BigDecimal value = null;

  public Price currencyIso(String currencyIso) {
    this.currencyIso = currencyIso;
    return this;
  }

   /**
   * Currency iso format
   * @return currencyIso
  **/
  @ApiModelProperty(value = "Currency iso format")
  public String getCurrencyIso() {
    return currencyIso;
  }

  public void setCurrencyIso(String currencyIso) {
    this.currencyIso = currencyIso;
  }

  public Price formattedValue(String formattedValue) {
    this.formattedValue = formattedValue;
    return this;
  }

   /**
   * Value of price formatted
   * @return formattedValue
  **/
  @ApiModelProperty(value = "Value of price formatted")
  public String getFormattedValue() {
    return formattedValue;
  }

  public void setFormattedValue(String formattedValue) {
    this.formattedValue = formattedValue;
  }

  public Price maxQuantity(Long maxQuantity) {
    this.maxQuantity = maxQuantity;
    return this;
  }

   /**
   * Maximum quantity of the price value
   * @return maxQuantity
  **/
  @ApiModelProperty(value = "Maximum quantity of the price value")
  public Long getMaxQuantity() {
    return maxQuantity;
  }

  public void setMaxQuantity(Long maxQuantity) {
    this.maxQuantity = maxQuantity;
  }

  public Price minQuantity(Long minQuantity) {
    this.minQuantity = minQuantity;
    return this;
  }

   /**
   * Minimum quantity of the price value
   * @return minQuantity
  **/
  @ApiModelProperty(value = "Minimum quantity of the price value")
  public Long getMinQuantity() {
    return minQuantity;
  }

  public void setMinQuantity(Long minQuantity) {
    this.minQuantity = minQuantity;
  }

  public Price priceType(PriceTypeEnum priceType) {
    this.priceType = priceType;
    return this;
  }

   /**
   * Type of the price
   * @return priceType
  **/
  @ApiModelProperty(value = "Type of the price")
  public PriceTypeEnum getPriceType() {
    return priceType;
  }

  public void setPriceType(PriceTypeEnum priceType) {
    this.priceType = priceType;
  }

  public Price value(BigDecimal value) {
    this.value = value;
    return this;
  }

   /**
   * Value of price in BigDecimal format
   * @return value
  **/
  @ApiModelProperty(value = "Value of price in BigDecimal format")
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Price price = (Price) o;
    return Objects.equals(this.currencyIso, price.currencyIso) &&
        Objects.equals(this.formattedValue, price.formattedValue) &&
        Objects.equals(this.maxQuantity, price.maxQuantity) &&
        Objects.equals(this.minQuantity, price.minQuantity) &&
        Objects.equals(this.priceType, price.priceType) &&
        Objects.equals(this.value, price.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyIso, formattedValue, maxQuantity, minQuantity, priceType, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Price {\n");
    
    sb.append("    currencyIso: ").append(toIndentedString(currencyIso)).append("\n");
    sb.append("    formattedValue: ").append(toIndentedString(formattedValue)).append("\n");
    sb.append("    maxQuantity: ").append(toIndentedString(maxQuantity)).append("\n");
    sb.append("    minQuantity: ").append(toIndentedString(minQuantity)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

