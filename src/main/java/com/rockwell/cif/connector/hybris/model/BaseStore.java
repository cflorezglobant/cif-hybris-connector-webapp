/*
 * Commerce Webservices v2
 * These services manage all of the common commerce functionality, and also include customizations from installed AddOns.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockwell.cif.connector.hybris.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Representation of a Base Store
 */
@ApiModel(description = "Representation of a Base Store")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-23T22:16:40.723Z")



public class BaseStore {
  @SerializedName("createReturnProcessCode")
  private String createReturnProcessCode = null;

  @SerializedName("currencies")
  private List<Currency> currencies = null;

  @SerializedName("defaultCurrency")
  private Currency defaultCurrency = null;

  @SerializedName("defaultDeliveryOrigin")
  private PointOfService defaultDeliveryOrigin = null;

  @SerializedName("defaultLanguage")
  private Language defaultLanguage = null;

  @SerializedName("deliveryCountries")
  private List<Country> deliveryCountries = null;

  @SerializedName("deliveryModes")
  private DeliveryModeList deliveryModes = null;

  @SerializedName("externalTaxEnabled")
  private Boolean externalTaxEnabled = null;

  @SerializedName("languages")
  private List<Language> languages = null;

  @SerializedName("maxRadiusForPosSearch")
  private Double maxRadiusForPosSearch = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("paymentProvider")
  private String paymentProvider = null;

  @SerializedName("pointsOfService")
  private List<PointOfService> pointsOfService = null;

  @SerializedName("submitOrderProcessCode")
  private String submitOrderProcessCode = null;

  public BaseStore createReturnProcessCode(String createReturnProcessCode) {
    this.createReturnProcessCode = createReturnProcessCode;
    return this;
  }

   /**
   * Create return process code
   * @return createReturnProcessCode
  **/
  @ApiModelProperty(value = "Create return process code")
  public String getCreateReturnProcessCode() {
    return createReturnProcessCode;
  }

  public void setCreateReturnProcessCode(String createReturnProcessCode) {
    this.createReturnProcessCode = createReturnProcessCode;
  }

  public BaseStore currencies(List<Currency> currencies) {
    this.currencies = currencies;
    return this;
  }

  public BaseStore addCurrenciesItem(Currency currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<Currency>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

   /**
   * List of currencies
   * @return currencies
  **/
  @ApiModelProperty(value = "List of currencies")
  public List<Currency> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(List<Currency> currencies) {
    this.currencies = currencies;
  }

  public BaseStore defaultCurrency(Currency defaultCurrency) {
    this.defaultCurrency = defaultCurrency;
    return this;
  }

   /**
   * Default currency
   * @return defaultCurrency
  **/
  @ApiModelProperty(value = "Default currency")
  public Currency getDefaultCurrency() {
    return defaultCurrency;
  }

  public void setDefaultCurrency(Currency defaultCurrency) {
    this.defaultCurrency = defaultCurrency;
  }

  public BaseStore defaultDeliveryOrigin(PointOfService defaultDeliveryOrigin) {
    this.defaultDeliveryOrigin = defaultDeliveryOrigin;
    return this;
  }

   /**
   * Point of service being default delivery origin
   * @return defaultDeliveryOrigin
  **/
  @ApiModelProperty(value = "Point of service being default delivery origin")
  public PointOfService getDefaultDeliveryOrigin() {
    return defaultDeliveryOrigin;
  }

  public void setDefaultDeliveryOrigin(PointOfService defaultDeliveryOrigin) {
    this.defaultDeliveryOrigin = defaultDeliveryOrigin;
  }

  public BaseStore defaultLanguage(Language defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

   /**
   * Default language
   * @return defaultLanguage
  **/
  @ApiModelProperty(value = "Default language")
  public Language getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(Language defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }

  public BaseStore deliveryCountries(List<Country> deliveryCountries) {
    this.deliveryCountries = deliveryCountries;
    return this;
  }

  public BaseStore addDeliveryCountriesItem(Country deliveryCountriesItem) {
    if (this.deliveryCountries == null) {
      this.deliveryCountries = new ArrayList<Country>();
    }
    this.deliveryCountries.add(deliveryCountriesItem);
    return this;
  }

   /**
   * List of delivery countries
   * @return deliveryCountries
  **/
  @ApiModelProperty(value = "List of delivery countries")
  public List<Country> getDeliveryCountries() {
    return deliveryCountries;
  }

  public void setDeliveryCountries(List<Country> deliveryCountries) {
    this.deliveryCountries = deliveryCountries;
  }

  public BaseStore deliveryModes(DeliveryModeList deliveryModes) {
    this.deliveryModes = deliveryModes;
    return this;
  }

   /**
   * List of delivery modes
   * @return deliveryModes
  **/
  @ApiModelProperty(value = "List of delivery modes")
  public DeliveryModeList getDeliveryModes() {
    return deliveryModes;
  }

  public void setDeliveryModes(DeliveryModeList deliveryModes) {
    this.deliveryModes = deliveryModes;
  }

  public BaseStore externalTaxEnabled(Boolean externalTaxEnabled) {
    this.externalTaxEnabled = externalTaxEnabled;
    return this;
  }

   /**
   * Flag defining is external tax is enabled
   * @return externalTaxEnabled
  **/
  @ApiModelProperty(value = "Flag defining is external tax is enabled")
  public Boolean isExternalTaxEnabled() {
    return externalTaxEnabled;
  }

  public void setExternalTaxEnabled(Boolean externalTaxEnabled) {
    this.externalTaxEnabled = externalTaxEnabled;
  }

  public BaseStore languages(List<Language> languages) {
    this.languages = languages;
    return this;
  }

  public BaseStore addLanguagesItem(Language languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<Language>();
    }
    this.languages.add(languagesItem);
    return this;
  }

   /**
   * List of languages
   * @return languages
  **/
  @ApiModelProperty(value = "List of languages")
  public List<Language> getLanguages() {
    return languages;
  }

  public void setLanguages(List<Language> languages) {
    this.languages = languages;
  }

  public BaseStore maxRadiusForPosSearch(Double maxRadiusForPosSearch) {
    this.maxRadiusForPosSearch = maxRadiusForPosSearch;
    return this;
  }

   /**
   * Maximum radius for searching point of service
   * @return maxRadiusForPosSearch
  **/
  @ApiModelProperty(value = "Maximum radius for searching point of service")
  public Double getMaxRadiusForPosSearch() {
    return maxRadiusForPosSearch;
  }

  public void setMaxRadiusForPosSearch(Double maxRadiusForPosSearch) {
    this.maxRadiusForPosSearch = maxRadiusForPosSearch;
  }

  public BaseStore name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Base store name
   * @return name
  **/
  @ApiModelProperty(value = "Base store name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BaseStore paymentProvider(String paymentProvider) {
    this.paymentProvider = paymentProvider;
    return this;
  }

   /**
   * Payment provider
   * @return paymentProvider
  **/
  @ApiModelProperty(value = "Payment provider")
  public String getPaymentProvider() {
    return paymentProvider;
  }

  public void setPaymentProvider(String paymentProvider) {
    this.paymentProvider = paymentProvider;
  }

  public BaseStore pointsOfService(List<PointOfService> pointsOfService) {
    this.pointsOfService = pointsOfService;
    return this;
  }

  public BaseStore addPointsOfServiceItem(PointOfService pointsOfServiceItem) {
    if (this.pointsOfService == null) {
      this.pointsOfService = new ArrayList<PointOfService>();
    }
    this.pointsOfService.add(pointsOfServiceItem);
    return this;
  }

   /**
   * List of points of service
   * @return pointsOfService
  **/
  @ApiModelProperty(value = "List of points of service")
  public List<PointOfService> getPointsOfService() {
    return pointsOfService;
  }

  public void setPointsOfService(List<PointOfService> pointsOfService) {
    this.pointsOfService = pointsOfService;
  }

  public BaseStore submitOrderProcessCode(String submitOrderProcessCode) {
    this.submitOrderProcessCode = submitOrderProcessCode;
    return this;
  }

   /**
   * Submit order process code
   * @return submitOrderProcessCode
  **/
  @ApiModelProperty(value = "Submit order process code")
  public String getSubmitOrderProcessCode() {
    return submitOrderProcessCode;
  }

  public void setSubmitOrderProcessCode(String submitOrderProcessCode) {
    this.submitOrderProcessCode = submitOrderProcessCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseStore baseStore = (BaseStore) o;
    return Objects.equals(this.createReturnProcessCode, baseStore.createReturnProcessCode) &&
        Objects.equals(this.currencies, baseStore.currencies) &&
        Objects.equals(this.defaultCurrency, baseStore.defaultCurrency) &&
        Objects.equals(this.defaultDeliveryOrigin, baseStore.defaultDeliveryOrigin) &&
        Objects.equals(this.defaultLanguage, baseStore.defaultLanguage) &&
        Objects.equals(this.deliveryCountries, baseStore.deliveryCountries) &&
        Objects.equals(this.deliveryModes, baseStore.deliveryModes) &&
        Objects.equals(this.externalTaxEnabled, baseStore.externalTaxEnabled) &&
        Objects.equals(this.languages, baseStore.languages) &&
        Objects.equals(this.maxRadiusForPosSearch, baseStore.maxRadiusForPosSearch) &&
        Objects.equals(this.name, baseStore.name) &&
        Objects.equals(this.paymentProvider, baseStore.paymentProvider) &&
        Objects.equals(this.pointsOfService, baseStore.pointsOfService) &&
        Objects.equals(this.submitOrderProcessCode, baseStore.submitOrderProcessCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createReturnProcessCode, currencies, defaultCurrency, defaultDeliveryOrigin, defaultLanguage, deliveryCountries, deliveryModes, externalTaxEnabled, languages, maxRadiusForPosSearch, name, paymentProvider, pointsOfService, submitOrderProcessCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseStore {\n");
    
    sb.append("    createReturnProcessCode: ").append(toIndentedString(createReturnProcessCode)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    defaultCurrency: ").append(toIndentedString(defaultCurrency)).append("\n");
    sb.append("    defaultDeliveryOrigin: ").append(toIndentedString(defaultDeliveryOrigin)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    deliveryCountries: ").append(toIndentedString(deliveryCountries)).append("\n");
    sb.append("    deliveryModes: ").append(toIndentedString(deliveryModes)).append("\n");
    sb.append("    externalTaxEnabled: ").append(toIndentedString(externalTaxEnabled)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    maxRadiusForPosSearch: ").append(toIndentedString(maxRadiusForPosSearch)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentProvider: ").append(toIndentedString(paymentProvider)).append("\n");
    sb.append("    pointsOfService: ").append(toIndentedString(pointsOfService)).append("\n");
    sb.append("    submitOrderProcessCode: ").append(toIndentedString(submitOrderProcessCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

