/*
 * Commerce Webservices v2
 * These services manage all of the common commerce functionality, and also include customizations from installed AddOns.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockwell.cif.connector.hybris.model;

import com.google.gson.annotations.SerializedName;
import com.rockwell.cif.connector.server.graphql.model.*;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Representation of a Product
 */
@ApiModel(description = "Representation of a Product")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-23T22:16:40.723Z")


public class Product {
    @SerializedName("availableForPickup")
    private Boolean availableForPickup = null;

    @SerializedName("averageRating")
    private Double averageRating = null;

    @SerializedName("baseOptions")
    private List<BaseOption> baseOptions = null;

    @SerializedName("baseProduct")
    private String baseProduct = null;

    @SerializedName("categories")
    private List<Category> categories = null;

    @SerializedName("classifications")
    private List<Classification> classifications = null;

    @SerializedName("code")
    private String code = null;

    @SerializedName("configurable")
    private Boolean configurable = null;

    @SerializedName("configuratorType")
    private String configuratorType = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("firstVariantCode")
    private String firstVariantCode = null;

    @SerializedName("firstVariantImage")
    private String firstVariantImage = null;

    @SerializedName("futureStocks")
    private List<FutureStock> futureStocks = null;

    @SerializedName("images")
    private List<Image> images = null;

    @SerializedName("manufacturer")
    private String manufacturer = null;

    @SerializedName("multidimensional")
    private Boolean multidimensional = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("numberOfReviews")
    private Integer numberOfReviews = null;

    @SerializedName("potentialPromotions")
    private List<Promotion> potentialPromotions = null;

    @SerializedName("price")
    private Price price = null;

    @SerializedName("priceRange")
    private PriceRange priceRange = null;

    @SerializedName("productReferences")
    private List<ProductReference> productReferences = null;

    @SerializedName("purchasable")
    private Boolean purchasable = null;

    @SerializedName("reviews")
    private List<Review> reviews = null;

    @SerializedName("stock")
    private Stock stock = null;

    @SerializedName("summary")
    private String summary = null;

    @SerializedName("tags")
    private List<String> tags = null;

    @SerializedName("url")
    private String url = null;

    @SerializedName("variantMatrix")
    private List<VariantMatrixElement> variantMatrix = null;

    @SerializedName("variantOptions")
    private List<VariantOption> variantOptions = null;

    @SerializedName("variantType")
    private String variantType = null;

    @SerializedName("volumePrices")
    private List<Price> volumePrices = null;

    @SerializedName("volumePricesFlag")
    private Boolean volumePricesFlag = null;

    public Product availableForPickup(Boolean availableForPickup) {
        this.availableForPickup = availableForPickup;
        return this;
    }

    /**
     * Flag defining if product is available for pickup
     *
     * @return availableForPickup
     **/
    @ApiModelProperty(value = "Flag defining if product is available for pickup")
    public Boolean isAvailableForPickup() {
        return availableForPickup;
    }

    public void setAvailableForPickup(Boolean availableForPickup) {
        this.availableForPickup = availableForPickup;
    }

    public Product averageRating(Double averageRating) {
        this.averageRating = averageRating;
        return this;
    }

    /**
     * Rating number of average value
     *
     * @return averageRating
     **/
    @ApiModelProperty(value = "Rating number of average value")
    public Double getAverageRating() {
        return averageRating;
    }

    public void setAverageRating(Double averageRating) {
        this.averageRating = averageRating;
    }

    public Product baseOptions(List<BaseOption> baseOptions) {
        this.baseOptions = baseOptions;
        return this;
    }

    public Product addBaseOptionsItem(BaseOption baseOptionsItem) {
        if (this.baseOptions == null) {
            this.baseOptions = new ArrayList<BaseOption>();
        }
        this.baseOptions.add(baseOptionsItem);
        return this;
    }

    /**
     * List of base options related to the product
     *
     * @return baseOptions
     **/
    @ApiModelProperty(value = "List of base options related to the product")
    public List<BaseOption> getBaseOptions() {
        return baseOptions;
    }

    public void setBaseOptions(List<BaseOption> baseOptions) {
        this.baseOptions = baseOptions;
    }

    public Product baseProduct(String baseProduct) {
        this.baseProduct = baseProduct;
        return this;
    }

    /**
     * Information about base product
     *
     * @return baseProduct
     **/
    @ApiModelProperty(value = "Information about base product")
    public String getBaseProduct() {
        return baseProduct;
    }

    public void setBaseProduct(String baseProduct) {
        this.baseProduct = baseProduct;
    }

    public Product categories(List<Category> categories) {
        this.categories = categories;
        return this;
    }

    public Product addCategoriesItem(Category categoriesItem) {
        if (this.categories == null) {
            this.categories = new ArrayList<Category>();
        }
        this.categories.add(categoriesItem);
        return this;
    }

    /**
     * List of categories product belongs to
     *
     * @return categories
     **/
    @ApiModelProperty(value = "List of categories product belongs to")
    public List<Category> getCategories() {
        return categories;
    }

    public void setCategories(List<Category> categories) {
        this.categories = categories;
    }

    public Product classifications(List<Classification> classifications) {
        this.classifications = classifications;
        return this;
    }

    public Product addClassificationsItem(Classification classificationsItem) {
        if (this.classifications == null) {
            this.classifications = new ArrayList<Classification>();
        }
        this.classifications.add(classificationsItem);
        return this;
    }

    /**
     * List of classifications related to the product
     *
     * @return classifications
     **/
    @ApiModelProperty(value = "List of classifications related to the product")
    public List<Classification> getClassifications() {
        return classifications;
    }

    public void setClassifications(List<Classification> classifications) {
        this.classifications = classifications;
    }

    public Product code(String code) {
        this.code = code;
        return this;
    }

    /**
     * Code of the product
     *
     * @return code
     **/
    @ApiModelProperty(value = "Code of the product")
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public Product configurable(Boolean configurable) {
        this.configurable = configurable;
        return this;
    }

    /**
     * Flag stating if product is configurable
     *
     * @return configurable
     **/
    @ApiModelProperty(value = "Flag stating if product is configurable")
    public Boolean isConfigurable() {
        return configurable;
    }

    public void setConfigurable(Boolean configurable) {
        this.configurable = configurable;
    }

    public Product configuratorType(String configuratorType) {
        this.configuratorType = configuratorType;
        return this;
    }

    /**
     * Configurator type related to the product
     *
     * @return configuratorType
     **/
    @ApiModelProperty(value = "Configurator type related to the product")
    public String getConfiguratorType() {
        return configuratorType;
    }

    public void setConfiguratorType(String configuratorType) {
        this.configuratorType = configuratorType;
    }

    public Product description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Description of the product
     *
     * @return description
     **/
    @ApiModelProperty(value = "Description of the product")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Product firstVariantCode(String firstVariantCode) {
        this.firstVariantCode = firstVariantCode;
        return this;
    }

    /**
     * Get firstVariantCode
     *
     * @return firstVariantCode
     **/
    @ApiModelProperty(value = "")
    public String getFirstVariantCode() {
        return firstVariantCode;
    }

    public void setFirstVariantCode(String firstVariantCode) {
        this.firstVariantCode = firstVariantCode;
    }

    public Product firstVariantImage(String firstVariantImage) {
        this.firstVariantImage = firstVariantImage;
        return this;
    }

    /**
     * Get firstVariantImage
     *
     * @return firstVariantImage
     **/
    @ApiModelProperty(value = "")
    public String getFirstVariantImage() {
        return firstVariantImage;
    }

    public void setFirstVariantImage(String firstVariantImage) {
        this.firstVariantImage = firstVariantImage;
    }

    public Product futureStocks(List<FutureStock> futureStocks) {
        this.futureStocks = futureStocks;
        return this;
    }

    public Product addFutureStocksItem(FutureStock futureStocksItem) {
        if (this.futureStocks == null) {
            this.futureStocks = new ArrayList<FutureStock>();
        }
        this.futureStocks.add(futureStocksItem);
        return this;
    }

    /**
     * List of future stocks
     *
     * @return futureStocks
     **/
    @ApiModelProperty(value = "List of future stocks")
    public List<FutureStock> getFutureStocks() {
        return futureStocks;
    }

    public void setFutureStocks(List<FutureStock> futureStocks) {
        this.futureStocks = futureStocks;
    }

    public Product images(List<Image> images) {
        this.images = images;
        return this;
    }

    public Product addImagesItem(Image imagesItem) {
        if (this.images == null) {
            this.images = new ArrayList<Image>();
        }
        this.images.add(imagesItem);
        return this;
    }

    /**
     * List of images linked to product
     *
     * @return images
     **/
    @ApiModelProperty(value = "List of images linked to product")
    public List<Image> getImages() {
        return images;
    }

    public void setImages(List<Image> images) {
        this.images = images;
    }

    public Product manufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
        return this;
    }

    /**
     * Data of product manufacturer
     *
     * @return manufacturer
     **/
    @ApiModelProperty(value = "Data of product manufacturer")
    public String getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(String manufacturer) {
        this.manufacturer = manufacturer;
    }

    public Product multidimensional(Boolean multidimensional) {
        this.multidimensional = multidimensional;
        return this;
    }

    /**
     * Flag stating if product is multidimentional
     *
     * @return multidimensional
     **/
    @ApiModelProperty(value = "Flag stating if product is multidimentional")
    public Boolean isMultidimensional() {
        return multidimensional;
    }

    public void setMultidimensional(Boolean multidimensional) {
        this.multidimensional = multidimensional;
    }

    public Product name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of the product
     *
     * @return name
     **/
    @ApiModelProperty(value = "Name of the product")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Product numberOfReviews(Integer numberOfReviews) {
        this.numberOfReviews = numberOfReviews;
        return this;
    }

    /**
     * Number of reviews associated with the product
     *
     * @return numberOfReviews
     **/
    @ApiModelProperty(value = "Number of reviews associated with the product")
    public Integer getNumberOfReviews() {
        return numberOfReviews;
    }

    public void setNumberOfReviews(Integer numberOfReviews) {
        this.numberOfReviews = numberOfReviews;
    }

    public Product potentialPromotions(List<Promotion> potentialPromotions) {
        this.potentialPromotions = potentialPromotions;
        return this;
    }

    public Product addPotentialPromotionsItem(Promotion potentialPromotionsItem) {
        if (this.potentialPromotions == null) {
            this.potentialPromotions = new ArrayList<Promotion>();
        }
        this.potentialPromotions.add(potentialPromotionsItem);
        return this;
    }

    /**
     * List of potential promotions related to the product
     *
     * @return potentialPromotions
     **/
    @ApiModelProperty(value = "List of potential promotions related to the product")
    public List<Promotion> getPotentialPromotions() {
        return potentialPromotions;
    }

    public void setPotentialPromotions(List<Promotion> potentialPromotions) {
        this.potentialPromotions = potentialPromotions;
    }

    public Product price(Price price) {
        this.price = price;
        return this;
    }

    /**
     * Price of the product
     *
     * @return price
     **/
    @ApiModelProperty(value = "Price of the product")
    public Price getPrice() {
        return price;
    }

    public void setPrice(Price price) {
        this.price = price;
    }

    public Product priceRange(PriceRange priceRange) {
        this.priceRange = priceRange;
        return this;
    }

    /**
     * Price range assigned to the product
     *
     * @return priceRange
     **/
    @ApiModelProperty(value = "Price range assigned to the product")
    public PriceRange getPriceRange() {
        return priceRange;
    }

    public void setPriceRange(PriceRange priceRange) {
        this.priceRange = priceRange;
    }

    public Product productReferences(List<ProductReference> productReferences) {
        this.productReferences = productReferences;
        return this;
    }

    public Product addProductReferencesItem(ProductReference productReferencesItem) {
        if (this.productReferences == null) {
            this.productReferences = new ArrayList<ProductReference>();
        }
        this.productReferences.add(productReferencesItem);
        return this;
    }

    /**
     * List of product references
     *
     * @return productReferences
     **/
    @ApiModelProperty(value = "List of product references")
    public List<ProductReference> getProductReferences() {
        return productReferences;
    }

    public void setProductReferences(List<ProductReference> productReferences) {
        this.productReferences = productReferences;
    }

    public Product purchasable(Boolean purchasable) {
        this.purchasable = purchasable;
        return this;
    }

    /**
     * Flag defining if product is purchasable
     *
     * @return purchasable
     **/
    @ApiModelProperty(value = "Flag defining if product is purchasable")
    public Boolean isPurchasable() {
        return purchasable;
    }

    public void setPurchasable(Boolean purchasable) {
        this.purchasable = purchasable;
    }

    public Product reviews(List<Review> reviews) {
        this.reviews = reviews;
        return this;
    }

    public Product addReviewsItem(Review reviewsItem) {
        if (this.reviews == null) {
            this.reviews = new ArrayList<Review>();
        }
        this.reviews.add(reviewsItem);
        return this;
    }

    /**
     * List of reviews associated with the product
     *
     * @return reviews
     **/
    @ApiModelProperty(value = "List of reviews associated with the product")
    public List<Review> getReviews() {
        return reviews;
    }

    public void setReviews(List<Review> reviews) {
        this.reviews = reviews;
    }

    public Product stock(Stock stock) {
        this.stock = stock;
        return this;
    }

    /**
     * Stock value of the product
     *
     * @return stock
     **/
    @ApiModelProperty(value = "Stock value of the product")
    public Stock getStock() {
        return stock;
    }

    public void setStock(Stock stock) {
        this.stock = stock;
    }

    public Product summary(String summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Product summary
     *
     * @return summary
     **/
    @ApiModelProperty(value = "Product summary")
    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public Product tags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    public Product addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<String>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * Tags associated with the product
     *
     * @return tags
     **/
    @ApiModelProperty(value = "Tags associated with the product")
    public List<String> getTags() {
        return tags;
    }

    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public Product url(String url) {
        this.url = url;
        return this;
    }

    /**
     * Url address of the product
     *
     * @return url
     **/
    @ApiModelProperty(value = "Url address of the product")
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Product variantMatrix(List<VariantMatrixElement> variantMatrix) {
        this.variantMatrix = variantMatrix;
        return this;
    }

    public Product addVariantMatrixItem(VariantMatrixElement variantMatrixItem) {
        if (this.variantMatrix == null) {
            this.variantMatrix = new ArrayList<VariantMatrixElement>();
        }
        this.variantMatrix.add(variantMatrixItem);
        return this;
    }

    /**
     * List of variant matrixes associated with the product
     *
     * @return variantMatrix
     **/
    @ApiModelProperty(value = "List of variant matrixes associated with the product")
    public List<VariantMatrixElement> getVariantMatrix() {
        return variantMatrix;
    }

    public void setVariantMatrix(List<VariantMatrixElement> variantMatrix) {
        this.variantMatrix = variantMatrix;
    }

    public Product variantOptions(List<VariantOption> variantOptions) {
        this.variantOptions = variantOptions;
        return this;
    }

    public Product addVariantOptionsItem(VariantOption variantOptionsItem) {
        if (this.variantOptions == null) {
            this.variantOptions = new ArrayList<VariantOption>();
        }
        this.variantOptions.add(variantOptionsItem);
        return this;
    }

    /**
     * List of variant options related to the product
     *
     * @return variantOptions
     **/
    @ApiModelProperty(value = "List of variant options related to the product")
    public List<VariantOption> getVariantOptions() {
        return variantOptions;
    }

    public void setVariantOptions(List<VariantOption> variantOptions) {
        this.variantOptions = variantOptions;
    }

    public Product variantType(String variantType) {
        this.variantType = variantType;
        return this;
    }

    /**
     * Variant type of the product
     *
     * @return variantType
     **/
    @ApiModelProperty(value = "Variant type of the product")
    public String getVariantType() {
        return variantType;
    }

    public void setVariantType(String variantType) {
        this.variantType = variantType;
    }

    public Product volumePrices(List<Price> volumePrices) {
        this.volumePrices = volumePrices;
        return this;
    }

    public Product addVolumePricesItem(Price volumePricesItem) {
        if (this.volumePrices == null) {
            this.volumePrices = new ArrayList<Price>();
        }
        this.volumePrices.add(volumePricesItem);
        return this;
    }

    /**
     * List of volume prices
     *
     * @return volumePrices
     **/
    @ApiModelProperty(value = "List of volume prices")
    public List<Price> getVolumePrices() {
        return volumePrices;
    }

    public void setVolumePrices(List<Price> volumePrices) {
        this.volumePrices = volumePrices;
    }

    public Product volumePricesFlag(Boolean volumePricesFlag) {
        this.volumePricesFlag = volumePricesFlag;
        return this;
    }

    /**
     * Flag stating if volume price should be displayed
     *
     * @return volumePricesFlag
     **/
    @ApiModelProperty(value = "Flag stating if volume price should be displayed")
    public Boolean isVolumePricesFlag() {
        return volumePricesFlag;
    }

    public void setVolumePricesFlag(Boolean volumePricesFlag) {
        this.volumePricesFlag = volumePricesFlag;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Product product = (Product) o;
        return Objects.equals(this.availableForPickup, product.availableForPickup) &&
                Objects.equals(this.averageRating, product.averageRating) &&
                Objects.equals(this.baseOptions, product.baseOptions) &&
                Objects.equals(this.baseProduct, product.baseProduct) &&
                Objects.equals(this.categories, product.categories) &&
                Objects.equals(this.classifications, product.classifications) &&
                Objects.equals(this.code, product.code) &&
                Objects.equals(this.configurable, product.configurable) &&
                Objects.equals(this.configuratorType, product.configuratorType) &&
                Objects.equals(this.description, product.description) &&
                Objects.equals(this.firstVariantCode, product.firstVariantCode) &&
                Objects.equals(this.firstVariantImage, product.firstVariantImage) &&
                Objects.equals(this.futureStocks, product.futureStocks) &&
                Objects.equals(this.images, product.images) &&
                Objects.equals(this.manufacturer, product.manufacturer) &&
                Objects.equals(this.multidimensional, product.multidimensional) &&
                Objects.equals(this.name, product.name) &&
                Objects.equals(this.numberOfReviews, product.numberOfReviews) &&
                Objects.equals(this.potentialPromotions, product.potentialPromotions) &&
                Objects.equals(this.price, product.price) &&
                Objects.equals(this.priceRange, product.priceRange) &&
                Objects.equals(this.productReferences, product.productReferences) &&
                Objects.equals(this.purchasable, product.purchasable) &&
                Objects.equals(this.reviews, product.reviews) &&
                Objects.equals(this.stock, product.stock) &&
                Objects.equals(this.summary, product.summary) &&
                Objects.equals(this.tags, product.tags) &&
                Objects.equals(this.url, product.url) &&
                Objects.equals(this.variantMatrix, product.variantMatrix) &&
                Objects.equals(this.variantOptions, product.variantOptions) &&
                Objects.equals(this.variantType, product.variantType) &&
                Objects.equals(this.volumePrices, product.volumePrices) &&
                Objects.equals(this.volumePricesFlag, product.volumePricesFlag);
    }

    @Override
    public int hashCode() {
        return Objects.hash(availableForPickup, averageRating, baseOptions, baseProduct, categories, classifications, code, configurable, configuratorType, description, firstVariantCode, firstVariantImage, futureStocks, images, manufacturer, multidimensional, name, numberOfReviews, potentialPromotions, price, priceRange, productReferences, purchasable, reviews, stock, summary, tags, url, variantMatrix, variantOptions, variantType, volumePrices, volumePricesFlag);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Product {\n");

        sb.append("    availableForPickup: ").append(toIndentedString(availableForPickup)).append("\n");
        sb.append("    averageRating: ").append(toIndentedString(averageRating)).append("\n");
        sb.append("    baseOptions: ").append(toIndentedString(baseOptions)).append("\n");
        sb.append("    baseProduct: ").append(toIndentedString(baseProduct)).append("\n");
        sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
        sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    configurable: ").append(toIndentedString(configurable)).append("\n");
        sb.append("    configuratorType: ").append(toIndentedString(configuratorType)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    firstVariantCode: ").append(toIndentedString(firstVariantCode)).append("\n");
        sb.append("    firstVariantImage: ").append(toIndentedString(firstVariantImage)).append("\n");
        sb.append("    futureStocks: ").append(toIndentedString(futureStocks)).append("\n");
        sb.append("    images: ").append(toIndentedString(images)).append("\n");
        sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
        sb.append("    multidimensional: ").append(toIndentedString(multidimensional)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    numberOfReviews: ").append(toIndentedString(numberOfReviews)).append("\n");
        sb.append("    potentialPromotions: ").append(toIndentedString(potentialPromotions)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    priceRange: ").append(toIndentedString(priceRange)).append("\n");
        sb.append("    productReferences: ").append(toIndentedString(productReferences)).append("\n");
        sb.append("    purchasable: ").append(toIndentedString(purchasable)).append("\n");
        sb.append("    reviews: ").append(toIndentedString(reviews)).append("\n");
        sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
        sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    variantMatrix: ").append(toIndentedString(variantMatrix)).append("\n");
        sb.append("    variantOptions: ").append(toIndentedString(variantOptions)).append("\n");
        sb.append("    variantType: ").append(toIndentedString(variantType)).append("\n");
        sb.append("    volumePrices: ").append(toIndentedString(volumePrices)).append("\n");
        sb.append("    volumePricesFlag: ").append(toIndentedString(volumePricesFlag)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public SimpleProduct adaptToSimpleProduct() {
        SimpleProduct simpleProduct = new SimpleProduct();
        adapToProduct(simpleProduct);
        return simpleProduct;

    }

    public ConfigurableProduct adaptToConfigurableProduct() {
        ConfigurableProduct configurableProduct = new ConfigurableProduct();
        adapToProduct(configurableProduct);
        return configurableProduct;
    }

    private ProductInterface adapToProduct(ProductInterface productInterface) {
        productInterface.setId(Integer.valueOf(this.getCode()));
        productInterface.setSku(this.getCode());
        productInterface.setName(this.getName());
        productInterface.setDescription(new ComplexTextValue(this.getDescription()));
        productInterface.setUrl_key(this.getCode());

        productInterface.setUpdated_at("2020-08-27 15:23:49");
        productInterface.setCreated_at("2020-08-27 15:23:49");

        if (this.getImages() != null && !this.getImages().isEmpty()) {
            Image thumbnail = (this.getImages().stream().filter(image -> "product".equals(image.getFormat()))).findFirst().get();
            if (thumbnail != null) {
                ProductImage media = new ProductImage();
                media.setLabel("label");
                media.setUrl(thumbnail.getUrl());
                productInterface.setThumbnail(media);

                productInterface.setSmall_image(media);
            }

            Image productImg = (this.getImages().stream().filter(image -> "zoom".equals(image.getFormat()) || "product".equals(image.getFormat()))).findFirst().get();
            if (productImg != null) {
                ProductImage media = new ProductImage();
                media.setLabel("label");
                media.setUrl(productImg.getUrl());
                productInterface.setImage(media);

                MediaGalleryEntry mediaGalleryEntry = new MediaGalleryEntry();
                mediaGalleryEntry.setDisabled(false);
                mediaGalleryEntry.setFile(productImg.getUrl());
                mediaGalleryEntry.setLabel("Image");
                mediaGalleryEntry.setMedia_type("image");
                mediaGalleryEntry.setPosition(1);
                productInterface.setMedia_gallery_entries(new ArrayList<>());
                productInterface.getMedia_gallery_entries().add(mediaGalleryEntry);

                productInterface.setMedia_gallery(new ArrayList<>());
                productInterface.getMedia_gallery().add(media);

            }

            com.rockwell.cif.connector.server.graphql.model.Price price = new com.rockwell.cif.connector.server.graphql.model.Price();

            Money priceValue = new Money(CurrencyEnum.USD, this.getPrice().getValue().doubleValue());

            price.setAmount(priceValue);

            productInterface.setPrice(new ProductPrices(price, price,
                    price));

            ProductPrice productPrice = new ProductPrice();
            productPrice.setDiscount(new ProductDiscount());
            productPrice.setFinal_price(priceValue);
            productPrice.setRegular_price(priceValue);

            com.rockwell.cif.connector.server.graphql.model.PriceRange priceRange = new com.rockwell.cif.connector.server.graphql.model.PriceRange(productPrice,
                    productPrice);

            productInterface.setPrice_range(priceRange);


            if (this.getCategories() != null && !this.getCategories().isEmpty()) {
                productInterface.setCategories(new ArrayList<>());
                for (Category category : this.getCategories()) {

                    try{
                        CategoryInterface cat1 = new CategoryTree();
                        cat1.setUrl_path(category.getCode());
                        cat1.setName(category.getName());
                        cat1.setId(Integer.valueOf(category.getCode()));
                        productInterface.getCategories().add(cat1);
                    } catch (Exception e){
                        //TODO: how to handle category ID as Strings
                        //CIF uses category IDs as numbers

                    }


                }
            }

        }

        return productInterface;
    }

}

