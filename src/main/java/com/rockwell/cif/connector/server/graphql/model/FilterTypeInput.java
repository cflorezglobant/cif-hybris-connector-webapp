/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("FilterTypeInput")
public class FilterTypeInput  {

	public FilterTypeInput(){
		// No action
	}

	@GraphQLScalar(fieldName = "eq", graphQLTypeName = "String", javaClass = String.class)
	String eq;


	@GraphQLScalar(fieldName = "finset", graphQLTypeName = "String", javaClass = String.class)
	List<String> finset;


	@GraphQLScalar(fieldName = "from", graphQLTypeName = "String", javaClass = String.class)
	String from;


	@GraphQLScalar(fieldName = "gt", graphQLTypeName = "String", javaClass = String.class)
	String gt;


	@GraphQLScalar(fieldName = "gteq", graphQLTypeName = "String", javaClass = String.class)
	String gteq;


	@GraphQLScalar(fieldName = "in", graphQLTypeName = "String", javaClass = String.class)
	List<String> in;


	@GraphQLScalar(fieldName = "like", graphQLTypeName = "String", javaClass = String.class)
	String like;


	@GraphQLScalar(fieldName = "lt", graphQLTypeName = "String", javaClass = String.class)
	String lt;


	@GraphQLScalar(fieldName = "lteq", graphQLTypeName = "String", javaClass = String.class)
	String lteq;


	@GraphQLScalar(fieldName = "moreq", graphQLTypeName = "String", javaClass = String.class)
	String moreq;


	@GraphQLScalar(fieldName = "neq", graphQLTypeName = "String", javaClass = String.class)
	String neq;


	@GraphQLScalar(fieldName = "nin", graphQLTypeName = "String", javaClass = String.class)
	List<String> nin;


	@GraphQLScalar(fieldName = "notnull", graphQLTypeName = "String", javaClass = String.class)
	String notnull;


	@GraphQLScalar(fieldName = "is_null", graphQLTypeName = "String", javaClass = String.class)
	String is_null;


	@GraphQLScalar(fieldName = "to", graphQLTypeName = "String", javaClass = String.class)
	String to;



	public void setEq(String eq) {
		this.eq = eq;
	}

	public String getEq() {
		return eq;
	}

	public void setFinset(List<String> finset) {
		this.finset = finset;
	}

	public List<String> getFinset() {
		return finset;
	}

	public void setFrom(String from) {
		this.from = from;
	}

	public String getFrom() {
		return from;
	}

	public void setGt(String gt) {
		this.gt = gt;
	}

	public String getGt() {
		return gt;
	}

	public void setGteq(String gteq) {
		this.gteq = gteq;
	}

	public String getGteq() {
		return gteq;
	}

	public void setIn(List<String> in) {
		this.in = in;
	}

	public List<String> getIn() {
		return in;
	}

	public void setLike(String like) {
		this.like = like;
	}

	public String getLike() {
		return like;
	}

	public void setLt(String lt) {
		this.lt = lt;
	}

	public String getLt() {
		return lt;
	}

	public void setLteq(String lteq) {
		this.lteq = lteq;
	}

	public String getLteq() {
		return lteq;
	}

	public void setMoreq(String moreq) {
		this.moreq = moreq;
	}

	public String getMoreq() {
		return moreq;
	}

	public void setNeq(String neq) {
		this.neq = neq;
	}

	public String getNeq() {
		return neq;
	}

	public void setNin(List<String> nin) {
		this.nin = nin;
	}

	public List<String> getNin() {
		return nin;
	}

	public void setNotnull(String notnull) {
		this.notnull = notnull;
	}

	public String getNotnull() {
		return notnull;
	}

	public void setIs_null(String is_null) {
		this.is_null = is_null;
	}

	public String getIs_null() {
		return is_null;
	}

	public void setTo(String to) {
		this.to = to;
	}

	public String getTo() {
		return to;
	}

    public String toString() {
        return "FilterTypeInput {"
				+ "eq: " + eq
				+ ", "
				+ "finset: " + finset
				+ ", "
				+ "from: " + from
				+ ", "
				+ "gt: " + gt
				+ ", "
				+ "gteq: " + gteq
				+ ", "
				+ "in: " + in
				+ ", "
				+ "like: " + like
				+ ", "
				+ "lt: " + lt
				+ ", "
				+ "lteq: " + lteq
				+ ", "
				+ "moreq: " + moreq
				+ ", "
				+ "neq: " + neq
				+ ", "
				+ "nin: " + nin
				+ ", "
				+ "notnull: " + notnull
				+ ", "
				+ "is_null: " + is_null
				+ ", "
				+ "to: " + to
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Eq("eq"),
		Finset("finset"),
		From("from"),
		Gt("gt"),
		Gteq("gteq"),
		In("in"),
		Like("like"),
		Lt("lt"),
		Lteq("lteq"),
		Moreq("moreq"),
		Neq("neq"),
		Nin("nin"),
		Notnull("notnull"),
		Is_null("is_null"),
		To("to");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String eq;
		private List<String> finset;
		private String from;
		private String gt;
		private String gteq;
		private List<String> in;
		private String like;
		private String lt;
		private String lteq;
		private String moreq;
		private String neq;
		private List<String> nin;
		private String notnull;
		private String is_null;
		private String to;


		public Builder withEq(String eq) {
			this.eq = eq;
			return this;
		}
		public Builder withFinset(List<String> finset) {
			this.finset = finset;
			return this;
		}
		public Builder withFrom(String from) {
			this.from = from;
			return this;
		}
		public Builder withGt(String gt) {
			this.gt = gt;
			return this;
		}
		public Builder withGteq(String gteq) {
			this.gteq = gteq;
			return this;
		}
		public Builder withIn(List<String> in) {
			this.in = in;
			return this;
		}
		public Builder withLike(String like) {
			this.like = like;
			return this;
		}
		public Builder withLt(String lt) {
			this.lt = lt;
			return this;
		}
		public Builder withLteq(String lteq) {
			this.lteq = lteq;
			return this;
		}
		public Builder withMoreq(String moreq) {
			this.moreq = moreq;
			return this;
		}
		public Builder withNeq(String neq) {
			this.neq = neq;
			return this;
		}
		public Builder withNin(List<String> nin) {
			this.nin = nin;
			return this;
		}
		public Builder withNotnull(String notnull) {
			this.notnull = notnull;
			return this;
		}
		public Builder withIs_null(String is_null) {
			this.is_null = is_null;
			return this;
		}
		public Builder withTo(String to) {
			this.to = to;
			return this;
		}

		public FilterTypeInput build() {
			FilterTypeInput _object = new FilterTypeInput();
			_object.setEq(eq);
			_object.setFinset(finset);
			_object.setFrom(from);
			_object.setGt(gt);
			_object.setGteq(gteq);
			_object.setIn(in);
			_object.setLike(like);
			_object.setLt(lt);
			_object.setLteq(lteq);
			_object.setMoreq(moreq);
			_object.setNeq(neq);
			_object.setNin(nin);
			_object.setNotnull(notnull);
			_object.setIs_null(is_null);
			_object.setTo(to);
			return _object;
		}
	}
}
