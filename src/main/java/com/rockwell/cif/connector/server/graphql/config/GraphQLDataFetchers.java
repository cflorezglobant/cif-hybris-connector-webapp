/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.config;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import javax.annotation.Resource;

import com.rockwell.cif.connector.server.graphql.fetcher.*;
import com.rockwell.cif.connector.server.graphql.fetcher.*;
import com.rockwell.cif.connector.server.graphql.fetcher.util.ProductAttributeSortInputFactory;
import com.rockwell.cif.connector.server.graphql.model.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dataloader.DataLoader;
import org.springframework.stereotype.Component;

import com.graphql_java_generator.GraphqlUtils;

import graphql.schema.DataFetcher;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
public class GraphQLDataFetchers {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLDataFetchers.class);

	@Resource
	DataFetchersDelegateAddBundleProductsToCartOutput dataFetchersDelegateAddBundleProductsToCartOutput;

	@Resource
	DataFetchersDelegateAddConfigurableProductsToCartOutput dataFetchersDelegateAddConfigurableProductsToCartOutput;

	@Resource
	DataFetchersDelegateAddDownloadableProductsToCartOutput dataFetchersDelegateAddDownloadableProductsToCartOutput;

	@Resource
	DataFetchersDelegateAddSimpleProductsToCartOutput dataFetchersDelegateAddSimpleProductsToCartOutput;

	@Resource
	DataFetchersDelegateAddVirtualProductsToCartOutput dataFetchersDelegateAddVirtualProductsToCartOutput;

	@Resource
	DataFetchersDelegateAggregation dataFetchersDelegateAggregation;

	@Resource
	DataFetchersDelegateApplyCouponToCartOutput dataFetchersDelegateApplyCouponToCartOutput;

	@Resource
	DataFetchersDelegateAttribute dataFetchersDelegateAttribute;

	@Resource
	DataFetchersDelegateAvailableShippingMethod dataFetchersDelegateAvailableShippingMethod;

	@Resource
	DataFetchersDelegateBillingCartAddress dataFetchersDelegateBillingCartAddress;

	@Resource
	DataFetchersDelegateBundleCartItem dataFetchersDelegateBundleCartItem;

	@Resource
	DataFetchersDelegateBundleItem dataFetchersDelegateBundleItem;

	@Resource
	DataFetchersDelegateBundleItemOption dataFetchersDelegateBundleItemOption;

	@Resource
	DataFetchersDelegateBundleProduct dataFetchersDelegateBundleProduct;

	@Resource
	DataFetchersDelegateCart dataFetchersDelegateCart;

	@Resource
	DataFetchersDelegateCartDiscount dataFetchersDelegateCartDiscount;

	@Resource
	DataFetchersDelegateCartItemPrices dataFetchersDelegateCartItemPrices;

	@Resource
	DataFetchersDelegateCartPrices dataFetchersDelegateCartPrices;

	@Resource
	DataFetchersDelegateCartTaxItem dataFetchersDelegateCartTaxItem;

	@Resource
	DataFetchersDelegateCategoryProducts dataFetchersDelegateCategoryProducts;

	@Resource
	DataFetchersDelegateCategoryTree dataFetchersDelegateCategoryTree;

	@Resource
	DataFetchersDelegateCmsBlocks dataFetchersDelegateCmsBlocks;

	@Resource
	DataFetchersDelegateConfigurableCartItem dataFetchersDelegateConfigurableCartItem;

	@Resource
	DataFetchersDelegateConfigurableProduct dataFetchersDelegateConfigurableProduct;

	@Resource
	DataFetchersDelegateConfigurableProductOptions dataFetchersDelegateConfigurableProductOptions;

	@Resource
	DataFetchersDelegateConfigurableVariant dataFetchersDelegateConfigurableVariant;

	@Resource
	DataFetchersDelegateCountry dataFetchersDelegateCountry;

	@Resource
	DataFetchersDelegateCurrency dataFetchersDelegateCurrency;

	@Resource
	DataFetchersDelegateCustomAttributeMetadata dataFetchersDelegateCustomAttributeMetadata;

	@Resource
	DataFetchersDelegateCustomer dataFetchersDelegateCustomer;

	@Resource
	DataFetchersDelegateCustomerAddress dataFetchersDelegateCustomerAddress;

	@Resource
	DataFetchersDelegateCustomerDownloadableProducts dataFetchersDelegateCustomerDownloadableProducts;

	@Resource
	DataFetchersDelegateCustomerOrders dataFetchersDelegateCustomerOrders;

	@Resource
	DataFetchersDelegateCustomerOutput dataFetchersDelegateCustomerOutput;

	@Resource
	DataFetchersDelegateCustomerPaymentTokens dataFetchersDelegateCustomerPaymentTokens;

	@Resource
	DataFetchersDelegateCustomizableAreaOption dataFetchersDelegateCustomizableAreaOption;

	@Resource
	DataFetchersDelegateCustomizableCheckboxOption dataFetchersDelegateCustomizableCheckboxOption;

	@Resource
	DataFetchersDelegateCustomizableDateOption dataFetchersDelegateCustomizableDateOption;

	@Resource
	DataFetchersDelegateCustomizableDropDownOption dataFetchersDelegateCustomizableDropDownOption;

	@Resource
	DataFetchersDelegateCustomizableFieldOption dataFetchersDelegateCustomizableFieldOption;

	@Resource
	DataFetchersDelegateCustomizableFileOption dataFetchersDelegateCustomizableFileOption;

	@Resource
	DataFetchersDelegateCustomizableMultipleOption dataFetchersDelegateCustomizableMultipleOption;

	@Resource
	DataFetchersDelegateCustomizableRadioOption dataFetchersDelegateCustomizableRadioOption;

	@Resource
	DataFetchersDelegateDeletePaymentTokenOutput dataFetchersDelegateDeletePaymentTokenOutput;

	@Resource
	DataFetchersDelegateDiscount dataFetchersDelegateDiscount;

	@Resource
	DataFetchersDelegateDownloadableCartItem dataFetchersDelegateDownloadableCartItem;

	@Resource
	DataFetchersDelegateDownloadableProduct dataFetchersDelegateDownloadableProduct;

	@Resource
	DataFetchersDelegateFixedProductTax dataFetchersDelegateFixedProductTax;

	@Resource
	DataFetchersDelegateGroupedProduct dataFetchersDelegateGroupedProduct;

	@Resource
	DataFetchersDelegateGroupedProductItem dataFetchersDelegateGroupedProductItem;

	@Resource
	DataFetchersDelegateLayerFilter dataFetchersDelegateLayerFilter;

	@Resource
	DataFetchersDelegateMediaGalleryEntry dataFetchersDelegateMediaGalleryEntry;

	@Resource
	DataFetchersDelegateMutation dataFetchersDelegateMutation;

	@Resource
	DataFetchersDelegatePayflowProResponseOutput dataFetchersDelegatePayflowProResponseOutput;

	@Resource
	DataFetchersDelegatePaypalExpressToken dataFetchersDelegatePaypalExpressToken;

	@Resource
	DataFetchersDelegatePaypalExpressTokenOutput dataFetchersDelegatePaypalExpressTokenOutput;

	@Resource
	DataFetchersDelegatePlaceOrderOutput dataFetchersDelegatePlaceOrderOutput;

	@Resource
	DataFetchersDelegatePrice dataFetchersDelegatePrice;

	@Resource
	DataFetchersDelegatePriceAdjustment dataFetchersDelegatePriceAdjustment;

	@Resource
	DataFetchersDelegatePriceRange dataFetchersDelegatePriceRange;

	@Resource
	DataFetchersDelegateProductPrice dataFetchersDelegateProductPrice;

	@Resource
	DataFetchersDelegateProductPrices dataFetchersDelegateProductPrices;

	@Resource
	DataFetchersDelegateProducts dataFetchersDelegateProducts;

	@Resource
	DataFetchersDelegateProductVideo dataFetchersDelegateProductVideo;

	@Resource
	DataFetchersDelegateQuery dataFetchersDelegateQuery;

	@Resource
	DataFetchersDelegateRemoveCouponFromCartOutput dataFetchersDelegateRemoveCouponFromCartOutput;

	@Resource
	DataFetchersDelegateRemoveItemFromCartOutput dataFetchersDelegateRemoveItemFromCartOutput;

	@Resource
	DataFetchersDelegateSelectedBundleOption dataFetchersDelegateSelectedBundleOption;

	@Resource
	DataFetchersDelegateSelectedCustomizableOption dataFetchersDelegateSelectedCustomizableOption;

	@Resource
	DataFetchersDelegateSelectedCustomizableOptionValue dataFetchersDelegateSelectedCustomizableOptionValue;

	@Resource
	DataFetchersDelegateSelectedShippingMethod dataFetchersDelegateSelectedShippingMethod;

	@Resource
	DataFetchersDelegateSendEmailToFriendOutput dataFetchersDelegateSendEmailToFriendOutput;

	@Resource
	DataFetchersDelegateSetBillingAddressOnCartOutput dataFetchersDelegateSetBillingAddressOnCartOutput;

	@Resource
	DataFetchersDelegateSetGuestEmailOnCartOutput dataFetchersDelegateSetGuestEmailOnCartOutput;

	@Resource
	DataFetchersDelegateSetPaymentMethodOnCartOutput dataFetchersDelegateSetPaymentMethodOnCartOutput;

	@Resource
	DataFetchersDelegateSetShippingAddressesOnCartOutput dataFetchersDelegateSetShippingAddressesOnCartOutput;

	@Resource
	DataFetchersDelegateSetShippingMethodsOnCartOutput dataFetchersDelegateSetShippingMethodsOnCartOutput;

	@Resource
	DataFetchersDelegateShippingCartAddress dataFetchersDelegateShippingCartAddress;

	@Resource
	DataFetchersDelegateSimpleCartItem dataFetchersDelegateSimpleCartItem;

	@Resource
	DataFetchersDelegateSimpleProduct dataFetchersDelegateSimpleProduct;

	@Resource
	DataFetchersDelegateSortFields dataFetchersDelegateSortFields;

	@Resource
	DataFetchersDelegateSwatchLayerFilterItem dataFetchersDelegateSwatchLayerFilterItem;

	@Resource
	DataFetchersDelegateTierPrice dataFetchersDelegateTierPrice;

	@Resource
	DataFetchersDelegateUpdateCartItemsOutput dataFetchersDelegateUpdateCartItemsOutput;

	@Resource
	DataFetchersDelegateUrlRewrite dataFetchersDelegateUrlRewrite;

	@Resource
	DataFetchersDelegateVirtualCartItem dataFetchersDelegateVirtualCartItem;

	@Resource
	DataFetchersDelegateVirtualProduct dataFetchersDelegateVirtualProduct;

	@Resource
	DataFetchersDelegateWishlist dataFetchersDelegateWishlist;

	@Resource
	DataFetchersDelegateWishlistItem dataFetchersDelegateWishlistItem;

	@Resource
	DataFetchersDelegateWishlistOutput dataFetchersDelegateWishlistOutput;

	@Resource
	DataFetchersDelegateCartAddressInterface dataFetchersDelegateCartAddressInterface;

	@Resource
	DataFetchersDelegateCartItemInterface dataFetchersDelegateCartItemInterface;

	@Resource
	DataFetchersDelegateCategoryInterface dataFetchersDelegateCategoryInterface;

	@Resource
	DataFetchersDelegateCustomizableProductInterface dataFetchersDelegateCustomizableProductInterface;

	@Resource
	DataFetchersDelegateProductInterface dataFetchersDelegateProductInterface;

	@Resource
	DataFetchersDelegateSwatchLayerFilterItemInterface dataFetchersDelegateSwatchLayerFilterItemInterface;

	@Resource
	GraphqlUtils graphqlUtils;

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAddBundleProductsToCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateAddBundleProductsToCartOutputCart() {
		return dataFetchingEnvironment -> {
  			AddBundleProductsToCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateAddBundleProductsToCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateAddBundleProductsToCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AddBundleProductsToCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateAddBundleProductsToCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAddBundleProductsToCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAddConfigurableProductsToCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateAddConfigurableProductsToCartOutputCart() {
		return dataFetchingEnvironment -> {
  			AddConfigurableProductsToCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateAddConfigurableProductsToCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateAddConfigurableProductsToCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AddConfigurableProductsToCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateAddConfigurableProductsToCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAddConfigurableProductsToCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAddDownloadableProductsToCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateAddDownloadableProductsToCartOutputCart() {
		return dataFetchingEnvironment -> {
  			AddDownloadableProductsToCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateAddDownloadableProductsToCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateAddDownloadableProductsToCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AddDownloadableProductsToCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateAddDownloadableProductsToCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAddDownloadableProductsToCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAddSimpleProductsToCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateAddSimpleProductsToCartOutputCart() {
		return dataFetchingEnvironment -> {
  			AddSimpleProductsToCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateAddSimpleProductsToCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateAddSimpleProductsToCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AddSimpleProductsToCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateAddSimpleProductsToCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAddSimpleProductsToCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAddVirtualProductsToCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateAddVirtualProductsToCartOutputCart() {
		return dataFetchingEnvironment -> {
  			AddVirtualProductsToCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateAddVirtualProductsToCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateAddVirtualProductsToCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			AddVirtualProductsToCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateAddVirtualProductsToCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateAddVirtualProductsToCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAggregation
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<AggregationOption>> dataFetchersDelegateAggregationOptions() {
		return dataFetchingEnvironment -> {
  			Aggregation source = dataFetchingEnvironment.getSource();

			 List<AggregationOption> ret = dataFetchersDelegateAggregation.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateApplyCouponToCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateApplyCouponToCartOutputCart() {
		return dataFetchingEnvironment -> {
  			ApplyCouponToCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateApplyCouponToCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateApplyCouponToCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			ApplyCouponToCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateApplyCouponToCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateApplyCouponToCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAttribute
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<AttributeOption>> dataFetchersDelegateAttributeAttribute_options() {
		return dataFetchingEnvironment -> {
  			Attribute source = dataFetchingEnvironment.getSource();

			 List<AttributeOption> ret = dataFetchersDelegateAttribute.attribute_options(dataFetchingEnvironment, source);
			logger.debug("attribute_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateAvailableShippingMethod
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegateAvailableShippingMethodAmount() {
		return dataFetchingEnvironment -> {
  			AvailableShippingMethod source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateAvailableShippingMethod.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateAvailableShippingMethodBase_amount() {
		return dataFetchingEnvironment -> {
  			AvailableShippingMethod source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateAvailableShippingMethod.base_amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("base_amount: 1 result found");
			else
				logger.debug("base_amount: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateAvailableShippingMethodPrice_excl_tax() {
		return dataFetchingEnvironment -> {
  			AvailableShippingMethod source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateAvailableShippingMethod.price_excl_tax(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_excl_tax: 1 result found");
			else
				logger.debug("price_excl_tax: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateAvailableShippingMethodPrice_incl_tax() {
		return dataFetchingEnvironment -> {
  			AvailableShippingMethod source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateAvailableShippingMethod.price_incl_tax(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_incl_tax: 1 result found");
			else
				logger.debug("price_incl_tax: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateBillingCartAddress
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CartAddressCountry> dataFetchersDelegateBillingCartAddressCountry() {
		return dataFetchingEnvironment -> {
  			BillingCartAddress source = dataFetchingEnvironment.getSource();

			CartAddressCountry ret = null;
			try {
				ret = dataFetchersDelegateBillingCartAddress.country(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("country: 1 result found");
			else
				logger.debug("country: no result found");

			return ret;
		};
	}


	public DataFetcher<CartAddressRegion> dataFetchersDelegateBillingCartAddressRegion() {
		return dataFetchingEnvironment -> {
  			BillingCartAddress source = dataFetchingEnvironment.getSource();

			CartAddressRegion ret = null;
			try {
				ret = dataFetchersDelegateBillingCartAddress.region(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("region: 1 result found");
			else
				logger.debug("region: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateBillingCartAddressStreet() {
		return dataFetchingEnvironment -> {
  			BillingCartAddress source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateBillingCartAddress.street(dataFetchingEnvironment, source);
			logger.debug("street: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateBundleCartItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedBundleOption>> dataFetchersDelegateBundleCartItemBundle_options() {
		return dataFetchingEnvironment -> {
  			BundleCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedBundleOption> ret = dataFetchersDelegateBundleCartItem.bundle_options(dataFetchingEnvironment, source);
			logger.debug("bundle_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<SelectedCustomizableOption>> dataFetchersDelegateBundleCartItemCustomizable_options() {
		return dataFetchingEnvironment -> {
  			BundleCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedCustomizableOption> ret = dataFetchersDelegateBundleCartItem.customizable_options(dataFetchingEnvironment, source);
			logger.debug("customizable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartItemPrices> dataFetchersDelegateBundleCartItemPrices() {
		return dataFetchingEnvironment -> {
  			BundleCartItem source = dataFetchingEnvironment.getSource();

			CartItemPrices ret = null;
			try {
				ret = dataFetchersDelegateBundleCartItem.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductInterface> dataFetchersDelegateBundleCartItemProduct() {
		return dataFetchingEnvironment -> {
  			BundleCartItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateBundleCartItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateBundleItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<BundleItemOption>> dataFetchersDelegateBundleItemOptions() {
		return dataFetchingEnvironment -> {
  			BundleItem source = dataFetchingEnvironment.getSource();

			 List<BundleItemOption> ret = dataFetchersDelegateBundleItem.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateBundleItemOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductInterface> dataFetchersDelegateBundleItemOptionProduct() {
		return dataFetchingEnvironment -> {
  			BundleItemOption source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateBundleItemOption.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateBundleProduct
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateBundleProductCategories() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateBundleProduct.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateBundleProductCrosssell_products() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateBundleProduct.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateBundleProductDescription() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateBundleProductImage() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<BundleItem>> dataFetchersDelegateBundleProductItems() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<BundleItem> ret = dataFetchersDelegateBundleProduct.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateBundleProductMedia_gallery() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateBundleProduct.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateBundleProductMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateBundleProduct.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CustomizableOptionInterface>> dataFetchersDelegateBundleProductOptions() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<CustomizableOptionInterface> ret = dataFetchersDelegateBundleProduct.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateBundleProductPrice() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateBundleProductPrice_range() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateBundleProductPrice_tiers() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateBundleProduct.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateBundleProductProduct_links() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateBundleProduct.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateBundleProductRelated_products() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateBundleProduct.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateBundleProductShort_description() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateBundleProductSmall_image() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateBundleProductThumbnail() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateBundleProduct.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateBundleProductTier_prices() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateBundleProduct.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateBundleProductUpsell_products() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateBundleProduct.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateBundleProductUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateBundleProduct.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateBundleProductWebsites() {
		return dataFetchingEnvironment -> {
  			BundleProduct source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateBundleProduct.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCart
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<AppliedCoupon> dataFetchersDelegateCartApplied_coupon() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			AppliedCoupon ret = null;
			try {
				ret = dataFetchersDelegateCart.applied_coupon(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("applied_coupon: 1 result found");
			else
				logger.debug("applied_coupon: no result found");

			return ret;
		};
	}


	public DataFetcher<List<AppliedCoupon>> dataFetchersDelegateCartApplied_coupons() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			 List<AppliedCoupon> ret = dataFetchersDelegateCart.applied_coupons(dataFetchingEnvironment, source);
			logger.debug("applied_coupons: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<AvailablePaymentMethod>> dataFetchersDelegateCartAvailable_payment_methods() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			 List<AvailablePaymentMethod> ret = dataFetchersDelegateCart.available_payment_methods(dataFetchingEnvironment, source);
			logger.debug("available_payment_methods: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<BillingCartAddress> dataFetchersDelegateCartBilling_address() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			BillingCartAddress ret = null;
			try {
				ret = dataFetchersDelegateCart.billing_address(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("billing_address: 1 result found");
			else
				logger.debug("billing_address: no result found");

			return ret;
		};
	}


	public DataFetcher<List<CartItemInterface>> dataFetchersDelegateCartItems() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			 List<CartItemInterface> ret = dataFetchersDelegateCart.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartPrices> dataFetchersDelegateCartPrices() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			CartPrices ret = null;
			try {
				ret = dataFetchersDelegateCart.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<SelectedPaymentMethod> dataFetchersDelegateCartSelected_payment_method() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			SelectedPaymentMethod ret = null;
			try {
				ret = dataFetchersDelegateCart.selected_payment_method(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("selected_payment_method: 1 result found");
			else
				logger.debug("selected_payment_method: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ShippingCartAddress>> dataFetchersDelegateCartShipping_addresses() {
		return dataFetchingEnvironment -> {
  			Cart source = dataFetchingEnvironment.getSource();

			 List<ShippingCartAddress> ret = dataFetchersDelegateCart.shipping_addresses(dataFetchingEnvironment, source);
			logger.debug("shipping_addresses: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCartDiscount
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegateCartDiscountAmount() {
		return dataFetchingEnvironment -> {
  			CartDiscount source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartDiscount.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateCartDiscountLabel() {
		return dataFetchingEnvironment -> {
  			CartDiscount source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateCartDiscount.label(dataFetchingEnvironment, source);
			logger.debug("label: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCartItemPrices
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Discount>> dataFetchersDelegateCartItemPricesDiscounts() {
		return dataFetchingEnvironment -> {
  			CartItemPrices source = dataFetchingEnvironment.getSource();

			 List<Discount> ret = dataFetchersDelegateCartItemPrices.discounts(dataFetchingEnvironment, source);
			logger.debug("discounts: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartItemPricesPrice() {
		return dataFetchingEnvironment -> {
  			CartItemPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartItemPrices.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartItemPricesRow_total() {
		return dataFetchingEnvironment -> {
  			CartItemPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartItemPrices.row_total(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("row_total: 1 result found");
			else
				logger.debug("row_total: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartItemPricesRow_total_including_tax() {
		return dataFetchingEnvironment -> {
  			CartItemPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartItemPrices.row_total_including_tax(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("row_total_including_tax: 1 result found");
			else
				logger.debug("row_total_including_tax: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartItemPricesTotal_item_discount() {
		return dataFetchingEnvironment -> {
  			CartItemPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartItemPrices.total_item_discount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("total_item_discount: 1 result found");
			else
				logger.debug("total_item_discount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCartPrices
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CartTaxItem>> dataFetchersDelegateCartPricesApplied_taxes() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			 List<CartTaxItem> ret = dataFetchersDelegateCartPrices.applied_taxes(dataFetchingEnvironment, source);
			logger.debug("applied_taxes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartDiscount> dataFetchersDelegateCartPricesDiscount() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			CartDiscount ret = null;
			try {
				ret = dataFetchersDelegateCartPrices.discount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("discount: 1 result found");
			else
				logger.debug("discount: no result found");

			return ret;
		};
	}


	public DataFetcher<List<Discount>> dataFetchersDelegateCartPricesDiscounts() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			 List<Discount> ret = dataFetchersDelegateCartPrices.discounts(dataFetchingEnvironment, source);
			logger.debug("discounts: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartPricesGrand_total() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartPrices.grand_total(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("grand_total: 1 result found");
			else
				logger.debug("grand_total: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartPricesSubtotal_excluding_tax() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartPrices.subtotal_excluding_tax(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("subtotal_excluding_tax: 1 result found");
			else
				logger.debug("subtotal_excluding_tax: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartPricesSubtotal_including_tax() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartPrices.subtotal_including_tax(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("subtotal_including_tax: 1 result found");
			else
				logger.debug("subtotal_including_tax: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateCartPricesSubtotal_with_discount_excluding_tax() {
		return dataFetchingEnvironment -> {
  			CartPrices source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartPrices.subtotal_with_discount_excluding_tax(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("subtotal_with_discount_excluding_tax: 1 result found");
			else
				logger.debug("subtotal_with_discount_excluding_tax: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCartTaxItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegateCartTaxItemAmount() {
		return dataFetchingEnvironment -> {
  			CartTaxItem source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateCartTaxItem.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCategoryProducts
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<ProductInterface>> dataFetchersDelegateCategoryProductsItems() {
		return dataFetchingEnvironment -> {
  			CategoryProducts source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateCategoryProducts.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<SearchResultPageInfo> dataFetchersDelegateCategoryProductsPage_info() {
		return dataFetchingEnvironment -> {
  			CategoryProducts source = dataFetchingEnvironment.getSource();

			SearchResultPageInfo ret = null;
			try {
				ret = dataFetchersDelegateCategoryProducts.page_info(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("page_info: 1 result found");
			else
				logger.debug("page_info: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCategoryTree
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<String>> dataFetchersDelegateCategoryTreeAvailable_sort_by() {
		return dataFetchingEnvironment -> {
  			CategoryTree source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateCategoryTree.available_sort_by(dataFetchingEnvironment, source);
			logger.debug("available_sort_by: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Breadcrumb>> dataFetchersDelegateCategoryTreeBreadcrumbs() {
		return dataFetchingEnvironment -> {
  			CategoryTree source = dataFetchingEnvironment.getSource();

			 List<Breadcrumb> ret = dataFetchersDelegateCategoryTree.breadcrumbs(dataFetchingEnvironment, source);
			logger.debug("breadcrumbs: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CategoryTree>> dataFetchersDelegateCategoryTreeChildren() {
		return dataFetchingEnvironment -> {
  			CategoryTree source = dataFetchingEnvironment.getSource();

			 List<CategoryTree> ret = dataFetchersDelegateCategoryTree.children(dataFetchingEnvironment, source);
			logger.debug("children: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CmsBlock> dataFetchersDelegateCategoryTreeCms_block() {
		return dataFetchingEnvironment -> {
  			CategoryTree source = dataFetchingEnvironment.getSource();

			CmsBlock ret = null;
			try {
				ret = dataFetchersDelegateCategoryTree.cms_block(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cms_block: 1 result found");
			else
				logger.debug("cms_block: no result found");

			return ret;
		};
	}


	public DataFetcher<CategoryProducts> dataFetchersDelegateCategoryTreeProducts() {
		return dataFetchingEnvironment -> {
			Integer pageSize = dataFetchingEnvironment.getArgument("pageSize");
			Integer currentPage = dataFetchingEnvironment.getArgument("currentPage");

			//ProductAttributeSortInput sort = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("sort"), ProductAttributeSortInput.class);
			ProductAttributeSortInput sort = ProductAttributeSortInputFactory.getProductAttributeSortInputInstance((Map<String, Object>) dataFetchingEnvironment.getArgument("sort"));

			CategoryTree source = dataFetchingEnvironment.getSource();

			CategoryProducts ret = null;
			try {
				ret = dataFetchersDelegateCategoryTree.products(dataFetchingEnvironment, source, pageSize, currentPage, sort);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("products: 1 result found");
			else
				logger.debug("products: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCmsBlocks
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CmsBlock>> dataFetchersDelegateCmsBlocksItems() {
		return dataFetchingEnvironment -> {
  			CmsBlocks source = dataFetchingEnvironment.getSource();

			 List<CmsBlock> ret = dataFetchersDelegateCmsBlocks.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateConfigurableCartItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedConfigurableOption>> dataFetchersDelegateConfigurableCartItemConfigurable_options() {
		return dataFetchingEnvironment -> {
  			ConfigurableCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedConfigurableOption> ret = dataFetchersDelegateConfigurableCartItem.configurable_options(dataFetchingEnvironment, source);
			logger.debug("configurable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<SelectedCustomizableOption>> dataFetchersDelegateConfigurableCartItemCustomizable_options() {
		return dataFetchingEnvironment -> {
  			ConfigurableCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedCustomizableOption> ret = dataFetchersDelegateConfigurableCartItem.customizable_options(dataFetchingEnvironment, source);
			logger.debug("customizable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartItemPrices> dataFetchersDelegateConfigurableCartItemPrices() {
		return dataFetchingEnvironment -> {
  			ConfigurableCartItem source = dataFetchingEnvironment.getSource();

			CartItemPrices ret = null;
			try {
				ret = dataFetchersDelegateConfigurableCartItem.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductInterface> dataFetchersDelegateConfigurableCartItemProduct() {
		return dataFetchingEnvironment -> {
  			ConfigurableCartItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateConfigurableCartItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateConfigurableProduct
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateConfigurableProductCategories() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateConfigurableProduct.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ConfigurableProductOptions>> dataFetchersDelegateConfigurableProductConfigurable_options() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ConfigurableProductOptions> ret = dataFetchersDelegateConfigurableProduct.configurable_options(dataFetchingEnvironment, source);
			logger.debug("configurable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateConfigurableProductCrosssell_products() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateConfigurableProduct.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateConfigurableProductDescription() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateConfigurableProductImage() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateConfigurableProductMedia_gallery() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateConfigurableProduct.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateConfigurableProductMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateConfigurableProduct.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CustomizableOptionInterface>> dataFetchersDelegateConfigurableProductOptions() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<CustomizableOptionInterface> ret = dataFetchersDelegateConfigurableProduct.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateConfigurableProductPrice() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateConfigurableProductPrice_range() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateConfigurableProductPrice_tiers() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateConfigurableProduct.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateConfigurableProductProduct_links() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateConfigurableProduct.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateConfigurableProductRelated_products() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateConfigurableProduct.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateConfigurableProductShort_description() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateConfigurableProductSmall_image() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateConfigurableProductThumbnail() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateConfigurableProduct.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateConfigurableProductTier_prices() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateConfigurableProduct.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateConfigurableProductUpsell_products() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateConfigurableProduct.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateConfigurableProductUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateConfigurableProduct.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ConfigurableVariant>> dataFetchersDelegateConfigurableProductVariants() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<ConfigurableVariant> ret = dataFetchersDelegateConfigurableProduct.variants(dataFetchingEnvironment, source);
			logger.debug("variants: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateConfigurableProductWebsites() {
		return dataFetchingEnvironment -> {
  			ConfigurableProduct source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateConfigurableProduct.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateConfigurableProductOptions
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<ConfigurableProductOptionsValues>> dataFetchersDelegateConfigurableProductOptionsValues() {
		return dataFetchingEnvironment -> {
  			ConfigurableProductOptions source = dataFetchingEnvironment.getSource();

			 List<ConfigurableProductOptionsValues> ret = dataFetchersDelegateConfigurableProductOptions.values(dataFetchingEnvironment, source);
			logger.debug("values: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateConfigurableVariant
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<ConfigurableAttributeOption>> dataFetchersDelegateConfigurableVariantAttributes() {
		return dataFetchingEnvironment -> {
  			ConfigurableVariant source = dataFetchingEnvironment.getSource();

			 List<ConfigurableAttributeOption> ret = dataFetchersDelegateConfigurableVariant.attributes(dataFetchingEnvironment, source);
			logger.debug("attributes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<SimpleProduct> dataFetchersDelegateConfigurableVariantProduct() {
		return dataFetchingEnvironment -> {
  			ConfigurableVariant source = dataFetchingEnvironment.getSource();

			SimpleProduct ret = null;
			try {
				ret = dataFetchersDelegateConfigurableVariant.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCountry
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Region>> dataFetchersDelegateCountryAvailable_regions() {
		return dataFetchingEnvironment -> {
  			Country source = dataFetchingEnvironment.getSource();

			 List<Region> ret = dataFetchersDelegateCountry.available_regions(dataFetchingEnvironment, source);
			logger.debug("available_regions: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCurrency
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<String>> dataFetchersDelegateCurrencyAvailable_currency_codes() {
		return dataFetchingEnvironment -> {
  			Currency source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateCurrency.available_currency_codes(dataFetchingEnvironment, source);
			logger.debug("available_currency_codes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ExchangeRate>> dataFetchersDelegateCurrencyExchange_rates() {
		return dataFetchingEnvironment -> {
  			Currency source = dataFetchingEnvironment.getSource();

			 List<ExchangeRate> ret = dataFetchersDelegateCurrency.exchange_rates(dataFetchingEnvironment, source);
			logger.debug("exchange_rates: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomAttributeMetadata
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Attribute>> dataFetchersDelegateCustomAttributeMetadataItems() {
		return dataFetchingEnvironment -> {
  			CustomAttributeMetadata source = dataFetchingEnvironment.getSource();

			 List<Attribute> ret = dataFetchersDelegateCustomAttributeMetadata.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomer
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomerAddress>> dataFetchersDelegateCustomerAddresses() {
		return dataFetchingEnvironment -> {
  			Customer source = dataFetchingEnvironment.getSource();

			 List<CustomerAddress> ret = dataFetchersDelegateCustomer.addresses(dataFetchingEnvironment, source);
			logger.debug("addresses: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Wishlist> dataFetchersDelegateCustomerWishlist() {
		return dataFetchingEnvironment -> {
  			Customer source = dataFetchingEnvironment.getSource();

			Wishlist ret = null;
			try {
				ret = dataFetchersDelegateCustomer.wishlist(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("wishlist: 1 result found");
			else
				logger.debug("wishlist: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Wishlist>> dataFetchersDelegateCustomerWishlistWithDataLoader() {
		return dataFetchingEnvironment -> {
  			Customer source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Wishlist> dataLoader = dataFetchingEnvironment.getDataLoader("Wishlist"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateCustomer.wishlist(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateCustomer.wishlist(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomerAddress
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomerAddressAttribute>> dataFetchersDelegateCustomerAddressCustom_attributes() {
		return dataFetchingEnvironment -> {
  			CustomerAddress source = dataFetchingEnvironment.getSource();

			 List<CustomerAddressAttribute> ret = dataFetchersDelegateCustomerAddress.custom_attributes(dataFetchingEnvironment, source);
			logger.debug("custom_attributes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CustomerAddressAttribute>> dataFetchersDelegateCustomerAddressExtension_attributes() {
		return dataFetchingEnvironment -> {
  			CustomerAddress source = dataFetchingEnvironment.getSource();

			 List<CustomerAddressAttribute> ret = dataFetchersDelegateCustomerAddress.extension_attributes(dataFetchingEnvironment, source);
			logger.debug("extension_attributes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CustomerAddressRegion> dataFetchersDelegateCustomerAddressRegion() {
		return dataFetchingEnvironment -> {
  			CustomerAddress source = dataFetchingEnvironment.getSource();

			CustomerAddressRegion ret = null;
			try {
				ret = dataFetchersDelegateCustomerAddress.region(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("region: 1 result found");
			else
				logger.debug("region: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateCustomerAddressStreet() {
		return dataFetchingEnvironment -> {
  			CustomerAddress source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateCustomerAddress.street(dataFetchingEnvironment, source);
			logger.debug("street: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomerDownloadableProducts
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomerDownloadableProduct>> dataFetchersDelegateCustomerDownloadableProductsItems() {
		return dataFetchingEnvironment -> {
  			CustomerDownloadableProducts source = dataFetchingEnvironment.getSource();

			 List<CustomerDownloadableProduct> ret = dataFetchersDelegateCustomerDownloadableProducts.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomerOrders
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomerOrder>> dataFetchersDelegateCustomerOrdersItems() {
		return dataFetchingEnvironment -> {
  			CustomerOrders source = dataFetchingEnvironment.getSource();

			 List<CustomerOrder> ret = dataFetchersDelegateCustomerOrders.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomerOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Customer> dataFetchersDelegateCustomerOutputCustomer() {
		return dataFetchingEnvironment -> {
  			CustomerOutput source = dataFetchingEnvironment.getSource();

			Customer ret = null;
			try {
				ret = dataFetchersDelegateCustomerOutput.customer(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customer: 1 result found");
			else
				logger.debug("customer: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomerPaymentTokens
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<PaymentToken>> dataFetchersDelegateCustomerPaymentTokensItems() {
		return dataFetchingEnvironment -> {
  			CustomerPaymentTokens source = dataFetchingEnvironment.getSource();

			 List<PaymentToken> ret = dataFetchersDelegateCustomerPaymentTokens.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableAreaOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CustomizableAreaValue> dataFetchersDelegateCustomizableAreaOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableAreaOption source = dataFetchingEnvironment.getSource();

			CustomizableAreaValue ret = null;
			try {
				ret = dataFetchersDelegateCustomizableAreaOption.value(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("value: 1 result found");
			else
				logger.debug("value: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableCheckboxOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomizableCheckboxValue>> dataFetchersDelegateCustomizableCheckboxOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableCheckboxOption source = dataFetchingEnvironment.getSource();

			 List<CustomizableCheckboxValue> ret = dataFetchersDelegateCustomizableCheckboxOption.value(dataFetchingEnvironment, source);
			logger.debug("value: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableDateOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CustomizableDateValue> dataFetchersDelegateCustomizableDateOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableDateOption source = dataFetchingEnvironment.getSource();

			CustomizableDateValue ret = null;
			try {
				ret = dataFetchersDelegateCustomizableDateOption.value(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("value: 1 result found");
			else
				logger.debug("value: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableDropDownOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomizableDropDownValue>> dataFetchersDelegateCustomizableDropDownOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableDropDownOption source = dataFetchingEnvironment.getSource();

			 List<CustomizableDropDownValue> ret = dataFetchersDelegateCustomizableDropDownOption.value(dataFetchingEnvironment, source);
			logger.debug("value: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableFieldOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CustomizableFieldValue> dataFetchersDelegateCustomizableFieldOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableFieldOption source = dataFetchingEnvironment.getSource();

			CustomizableFieldValue ret = null;
			try {
				ret = dataFetchersDelegateCustomizableFieldOption.value(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("value: 1 result found");
			else
				logger.debug("value: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableFileOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CustomizableFileValue> dataFetchersDelegateCustomizableFileOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableFileOption source = dataFetchingEnvironment.getSource();

			CustomizableFileValue ret = null;
			try {
				ret = dataFetchersDelegateCustomizableFileOption.value(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("value: 1 result found");
			else
				logger.debug("value: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableMultipleOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomizableMultipleValue>> dataFetchersDelegateCustomizableMultipleOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableMultipleOption source = dataFetchingEnvironment.getSource();

			 List<CustomizableMultipleValue> ret = dataFetchersDelegateCustomizableMultipleOption.value(dataFetchingEnvironment, source);
			logger.debug("value: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableRadioOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomizableRadioValue>> dataFetchersDelegateCustomizableRadioOptionValue() {
		return dataFetchingEnvironment -> {
  			CustomizableRadioOption source = dataFetchingEnvironment.getSource();

			 List<CustomizableRadioValue> ret = dataFetchersDelegateCustomizableRadioOption.value(dataFetchingEnvironment, source);
			logger.debug("value: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateDeletePaymentTokenOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CustomerPaymentTokens> dataFetchersDelegateDeletePaymentTokenOutputCustomerPaymentTokens() {
		return dataFetchingEnvironment -> {
  			DeletePaymentTokenOutput source = dataFetchingEnvironment.getSource();

			CustomerPaymentTokens ret = null;
			try {
				ret = dataFetchersDelegateDeletePaymentTokenOutput.customerPaymentTokens(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customerPaymentTokens: 1 result found");
			else
				logger.debug("customerPaymentTokens: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateDiscount
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegateDiscountAmount() {
		return dataFetchingEnvironment -> {
  			Discount source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateDiscount.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateDownloadableCartItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedCustomizableOption>> dataFetchersDelegateDownloadableCartItemCustomizable_options() {
		return dataFetchingEnvironment -> {
  			DownloadableCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedCustomizableOption> ret = dataFetchersDelegateDownloadableCartItem.customizable_options(dataFetchingEnvironment, source);
			logger.debug("customizable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<DownloadableProductLinks>> dataFetchersDelegateDownloadableCartItemLinks() {
		return dataFetchingEnvironment -> {
  			DownloadableCartItem source = dataFetchingEnvironment.getSource();

			 List<DownloadableProductLinks> ret = dataFetchersDelegateDownloadableCartItem.links(dataFetchingEnvironment, source);
			logger.debug("links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartItemPrices> dataFetchersDelegateDownloadableCartItemPrices() {
		return dataFetchingEnvironment -> {
  			DownloadableCartItem source = dataFetchingEnvironment.getSource();

			CartItemPrices ret = null;
			try {
				ret = dataFetchersDelegateDownloadableCartItem.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductInterface> dataFetchersDelegateDownloadableCartItemProduct() {
		return dataFetchingEnvironment -> {
  			DownloadableCartItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateDownloadableCartItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}


	public DataFetcher<List<DownloadableProductSamples>> dataFetchersDelegateDownloadableCartItemSamples() {
		return dataFetchingEnvironment -> {
  			DownloadableCartItem source = dataFetchingEnvironment.getSource();

			 List<DownloadableProductSamples> ret = dataFetchersDelegateDownloadableCartItem.samples(dataFetchingEnvironment, source);
			logger.debug("samples: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateDownloadableProduct
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateDownloadableProductCategories() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateDownloadableProduct.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateDownloadableProductCrosssell_products() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateDownloadableProduct.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateDownloadableProductDescription() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<List<DownloadableProductLinks>> dataFetchersDelegateDownloadableProductDownloadable_product_links() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<DownloadableProductLinks> ret = dataFetchersDelegateDownloadableProduct.downloadable_product_links(dataFetchingEnvironment, source);
			logger.debug("downloadable_product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<DownloadableProductSamples>> dataFetchersDelegateDownloadableProductDownloadable_product_samples() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<DownloadableProductSamples> ret = dataFetchersDelegateDownloadableProduct.downloadable_product_samples(dataFetchingEnvironment, source);
			logger.debug("downloadable_product_samples: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateDownloadableProductImage() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateDownloadableProductMedia_gallery() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateDownloadableProduct.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateDownloadableProductMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateDownloadableProduct.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CustomizableOptionInterface>> dataFetchersDelegateDownloadableProductOptions() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<CustomizableOptionInterface> ret = dataFetchersDelegateDownloadableProduct.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateDownloadableProductPrice() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateDownloadableProductPrice_range() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateDownloadableProductPrice_tiers() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateDownloadableProduct.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateDownloadableProductProduct_links() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateDownloadableProduct.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateDownloadableProductRelated_products() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateDownloadableProduct.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateDownloadableProductShort_description() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateDownloadableProductSmall_image() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateDownloadableProductThumbnail() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateDownloadableProduct.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateDownloadableProductTier_prices() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateDownloadableProduct.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateDownloadableProductUpsell_products() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateDownloadableProduct.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateDownloadableProductUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateDownloadableProduct.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateDownloadableProductWebsites() {
		return dataFetchingEnvironment -> {
  			DownloadableProduct source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateDownloadableProduct.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateFixedProductTax
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegateFixedProductTaxAmount() {
		return dataFetchingEnvironment -> {
  			FixedProductTax source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateFixedProductTax.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateGroupedProduct
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateGroupedProductCategories() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateGroupedProduct.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateGroupedProductCrosssell_products() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateGroupedProduct.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateGroupedProductDescription() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateGroupedProductImage() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<GroupedProductItem>> dataFetchersDelegateGroupedProductItems() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<GroupedProductItem> ret = dataFetchersDelegateGroupedProduct.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateGroupedProductMedia_gallery() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateGroupedProduct.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateGroupedProductMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateGroupedProduct.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateGroupedProductPrice() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateGroupedProductPrice_range() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateGroupedProductPrice_tiers() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateGroupedProduct.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateGroupedProductProduct_links() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateGroupedProduct.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateGroupedProductRelated_products() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateGroupedProduct.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateGroupedProductShort_description() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateGroupedProductSmall_image() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateGroupedProductThumbnail() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateGroupedProduct.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateGroupedProductTier_prices() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateGroupedProduct.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateGroupedProductUpsell_products() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateGroupedProduct.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateGroupedProductUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateGroupedProduct.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateGroupedProductWebsites() {
		return dataFetchingEnvironment -> {
  			GroupedProduct source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateGroupedProduct.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateGroupedProductItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductInterface> dataFetchersDelegateGroupedProductItemProduct() {
		return dataFetchingEnvironment -> {
  			GroupedProductItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateGroupedProductItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateLayerFilter
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<LayerFilterItemInterface>> dataFetchersDelegateLayerFilterFilter_items() {
		return dataFetchingEnvironment -> {
  			LayerFilter source = dataFetchingEnvironment.getSource();

			 List<LayerFilterItemInterface> ret = dataFetchersDelegateLayerFilter.filter_items(dataFetchingEnvironment, source);
			logger.debug("filter_items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateMediaGalleryEntry
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductMediaGalleryEntriesContent> dataFetchersDelegateMediaGalleryEntryContent() {
		return dataFetchingEnvironment -> {
  			MediaGalleryEntry source = dataFetchingEnvironment.getSource();

			ProductMediaGalleryEntriesContent ret = null;
			try {
				ret = dataFetchersDelegateMediaGalleryEntry.content(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("content: 1 result found");
			else
				logger.debug("content: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateMediaGalleryEntryTypes() {
		return dataFetchingEnvironment -> {
  			MediaGalleryEntry source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateMediaGalleryEntry.types(dataFetchingEnvironment, source);
			logger.debug("types: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductMediaGalleryEntriesVideoContent> dataFetchersDelegateMediaGalleryEntryVideo_content() {
		return dataFetchingEnvironment -> {
  			MediaGalleryEntry source = dataFetchingEnvironment.getSource();

			ProductMediaGalleryEntriesVideoContent ret = null;
			try {
				ret = dataFetchersDelegateMediaGalleryEntry.video_content(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("video_content: 1 result found");
			else
				logger.debug("video_content: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateMutation
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<AddBundleProductsToCartOutput> dataFetchersDelegateMutationAddBundleProductsToCart() {
		return dataFetchingEnvironment -> {
			AddBundleProductsToCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), AddBundleProductsToCartInput.class);
  
			AddBundleProductsToCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.addBundleProductsToCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("addBundleProductsToCart: 1 result found");
			else
				logger.debug("addBundleProductsToCart: no result found");

			return ret;
		};
	}


	public DataFetcher<AddConfigurableProductsToCartOutput> dataFetchersDelegateMutationAddConfigurableProductsToCart() {
		return dataFetchingEnvironment -> {
			AddConfigurableProductsToCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), AddConfigurableProductsToCartInput.class);
  
			AddConfigurableProductsToCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.addConfigurableProductsToCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("addConfigurableProductsToCart: 1 result found");
			else
				logger.debug("addConfigurableProductsToCart: no result found");

			return ret;
		};
	}


	public DataFetcher<AddDownloadableProductsToCartOutput> dataFetchersDelegateMutationAddDownloadableProductsToCart() {
		return dataFetchingEnvironment -> {
			AddDownloadableProductsToCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), AddDownloadableProductsToCartInput.class);
  
			AddDownloadableProductsToCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.addDownloadableProductsToCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("addDownloadableProductsToCart: 1 result found");
			else
				logger.debug("addDownloadableProductsToCart: no result found");

			return ret;
		};
	}


	public DataFetcher<AddSimpleProductsToCartOutput> dataFetchersDelegateMutationAddSimpleProductsToCart() {
		return dataFetchingEnvironment -> {
			AddSimpleProductsToCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), AddSimpleProductsToCartInput.class);
  
			AddSimpleProductsToCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.addSimpleProductsToCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("addSimpleProductsToCart: 1 result found");
			else
				logger.debug("addSimpleProductsToCart: no result found");

			return ret;
		};
	}


	public DataFetcher<AddVirtualProductsToCartOutput> dataFetchersDelegateMutationAddVirtualProductsToCart() {
		return dataFetchingEnvironment -> {
			AddVirtualProductsToCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), AddVirtualProductsToCartInput.class);
  
			AddVirtualProductsToCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.addVirtualProductsToCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("addVirtualProductsToCart: 1 result found");
			else
				logger.debug("addVirtualProductsToCart: no result found");

			return ret;
		};
	}


	public DataFetcher<ApplyCouponToCartOutput> dataFetchersDelegateMutationApplyCouponToCart() {
		return dataFetchingEnvironment -> {
			ApplyCouponToCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), ApplyCouponToCartInput.class);
  
			ApplyCouponToCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.applyCouponToCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("applyCouponToCart: 1 result found");
			else
				logger.debug("applyCouponToCart: no result found");

			return ret;
		};
	}


	public DataFetcher<Customer> dataFetchersDelegateMutationChangeCustomerPassword() {
		return dataFetchingEnvironment -> {
			String currentPassword = dataFetchingEnvironment.getArgument("currentPassword");
			String newPassword = dataFetchingEnvironment.getArgument("newPassword");
  
			Customer ret = null;
			try {
				ret = dataFetchersDelegateMutation.changeCustomerPassword(dataFetchingEnvironment, currentPassword, newPassword);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("changeCustomerPassword: 1 result found");
			else
				logger.debug("changeCustomerPassword: no result found");

			return ret;
		};
	}


	public DataFetcher<String> dataFetchersDelegateMutationCreateBraintreeClientToken() {
		return dataFetchingEnvironment -> {
  
			String ret = null;
			try {
				ret = dataFetchersDelegateMutation.createBraintreeClientToken(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createBraintreeClientToken: 1 result found");
			else
				logger.debug("createBraintreeClientToken: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerOutput> dataFetchersDelegateMutationCreateCustomer() {
		return dataFetchingEnvironment -> {
			CustomerInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), CustomerInput.class);
  
			CustomerOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.createCustomer(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createCustomer: 1 result found");
			else
				logger.debug("createCustomer: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerAddress> dataFetchersDelegateMutationCreateCustomerAddress() {
		return dataFetchingEnvironment -> {
			CustomerAddressInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), CustomerAddressInput.class);
  
			CustomerAddress ret = null;
			try {
				ret = dataFetchersDelegateMutation.createCustomerAddress(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createCustomerAddress: 1 result found");
			else
				logger.debug("createCustomerAddress: no result found");

			return ret;
		};
	}


	public DataFetcher<String> dataFetchersDelegateMutationCreateEmptyCart() {
		return dataFetchingEnvironment -> {
			createEmptyCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), createEmptyCartInput.class);
  
			String ret = null;
			try {
				ret = dataFetchersDelegateMutation.createEmptyCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createEmptyCart: 1 result found");
			else
				logger.debug("createEmptyCart: no result found");

			return ret;
		};
	}


	public DataFetcher<CreatePayflowProTokenOutput> dataFetchersDelegateMutationCreatePayflowProToken() {
		return dataFetchingEnvironment -> {
			PayflowProTokenInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), PayflowProTokenInput.class);
  
			CreatePayflowProTokenOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.createPayflowProToken(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createPayflowProToken: 1 result found");
			else
				logger.debug("createPayflowProToken: no result found");

			return ret;
		};
	}


	public DataFetcher<PaypalExpressTokenOutput> dataFetchersDelegateMutationCreatePaypalExpressToken() {
		return dataFetchingEnvironment -> {
			PaypalExpressTokenInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), PaypalExpressTokenInput.class);
  
			PaypalExpressTokenOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.createPaypalExpressToken(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("createPaypalExpressToken: 1 result found");
			else
				logger.debug("createPaypalExpressToken: no result found");

			return ret;
		};
	}


	public DataFetcher<Boolean> dataFetchersDelegateMutationDeleteCustomerAddress() {
		return dataFetchingEnvironment -> {
			Integer id = dataFetchingEnvironment.getArgument("id");
  
			Boolean ret = null;
			try {
				ret = dataFetchersDelegateMutation.deleteCustomerAddress(dataFetchingEnvironment, id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("deleteCustomerAddress: 1 result found");
			else
				logger.debug("deleteCustomerAddress: no result found");

			return ret;
		};
	}


	public DataFetcher<DeletePaymentTokenOutput> dataFetchersDelegateMutationDeletePaymentToken() {
		return dataFetchingEnvironment -> {
			String public_hash = dataFetchingEnvironment.getArgument("public_hash");
  
			DeletePaymentTokenOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.deletePaymentToken(dataFetchingEnvironment, public_hash);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("deletePaymentToken: 1 result found");
			else
				logger.debug("deletePaymentToken: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerToken> dataFetchersDelegateMutationGenerateCustomerToken() {
		return dataFetchingEnvironment -> {
			String email = dataFetchingEnvironment.getArgument("email");
			String password = dataFetchingEnvironment.getArgument("password");
  
			CustomerToken ret = null;
			try {
				ret = dataFetchersDelegateMutation.generateCustomerToken(dataFetchingEnvironment, email, password);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("generateCustomerToken: 1 result found");
			else
				logger.debug("generateCustomerToken: no result found");

			return ret;
		};
	}


	public DataFetcher<PayflowProResponseOutput> dataFetchersDelegateMutationHandlePayflowProResponse() {
		return dataFetchingEnvironment -> {
			PayflowProResponseInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), PayflowProResponseInput.class);
  
			PayflowProResponseOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.handlePayflowProResponse(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("handlePayflowProResponse: 1 result found");
			else
				logger.debug("handlePayflowProResponse: no result found");

			return ret;
		};
	}


	public DataFetcher<Cart> dataFetchersDelegateMutationMergeCarts() {
		return dataFetchingEnvironment -> {
			String source_cart_id = dataFetchingEnvironment.getArgument("source_cart_id");
			String destination_cart_id = dataFetchingEnvironment.getArgument("destination_cart_id");
  
			Cart ret = null;
			try {
				ret = dataFetchersDelegateMutation.mergeCarts(dataFetchingEnvironment, source_cart_id, destination_cart_id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("mergeCarts: 1 result found");
			else
				logger.debug("mergeCarts: no result found");

			return ret;
		};
	}


	public DataFetcher<PlaceOrderOutput> dataFetchersDelegateMutationPlaceOrder() {
		return dataFetchingEnvironment -> {
			PlaceOrderInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), PlaceOrderInput.class);
  
			PlaceOrderOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.placeOrder(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("placeOrder: 1 result found");
			else
				logger.debug("placeOrder: no result found");

			return ret;
		};
	}


	public DataFetcher<RemoveCouponFromCartOutput> dataFetchersDelegateMutationRemoveCouponFromCart() {
		return dataFetchingEnvironment -> {
			RemoveCouponFromCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), RemoveCouponFromCartInput.class);
  
			RemoveCouponFromCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.removeCouponFromCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("removeCouponFromCart: 1 result found");
			else
				logger.debug("removeCouponFromCart: no result found");

			return ret;
		};
	}


	public DataFetcher<RemoveItemFromCartOutput> dataFetchersDelegateMutationRemoveItemFromCart() {
		return dataFetchingEnvironment -> {
			RemoveItemFromCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), RemoveItemFromCartInput.class);
  
			RemoveItemFromCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.removeItemFromCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("removeItemFromCart: 1 result found");
			else
				logger.debug("removeItemFromCart: no result found");

			return ret;
		};
	}


	public DataFetcher<RevokeCustomerTokenOutput> dataFetchersDelegateMutationRevokeCustomerToken() {
		return dataFetchingEnvironment -> {
  
			RevokeCustomerTokenOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.revokeCustomerToken(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("revokeCustomerToken: 1 result found");
			else
				logger.debug("revokeCustomerToken: no result found");

			return ret;
		};
	}


	public DataFetcher<SendEmailToFriendOutput> dataFetchersDelegateMutationSendEmailToFriend() {
		return dataFetchingEnvironment -> {
			SendEmailToFriendInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SendEmailToFriendInput.class);
  
			SendEmailToFriendOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.sendEmailToFriend(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("sendEmailToFriend: 1 result found");
			else
				logger.debug("sendEmailToFriend: no result found");

			return ret;
		};
	}


	public DataFetcher<SetBillingAddressOnCartOutput> dataFetchersDelegateMutationSetBillingAddressOnCart() {
		return dataFetchingEnvironment -> {
			SetBillingAddressOnCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SetBillingAddressOnCartInput.class);
  
			SetBillingAddressOnCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.setBillingAddressOnCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("setBillingAddressOnCart: 1 result found");
			else
				logger.debug("setBillingAddressOnCart: no result found");

			return ret;
		};
	}


	public DataFetcher<SetGuestEmailOnCartOutput> dataFetchersDelegateMutationSetGuestEmailOnCart() {
		return dataFetchingEnvironment -> {
			SetGuestEmailOnCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SetGuestEmailOnCartInput.class);
  
			SetGuestEmailOnCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.setGuestEmailOnCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("setGuestEmailOnCart: 1 result found");
			else
				logger.debug("setGuestEmailOnCart: no result found");

			return ret;
		};
	}


	public DataFetcher<PlaceOrderOutput> dataFetchersDelegateMutationSetPaymentMethodAndPlaceOrder() {
		return dataFetchingEnvironment -> {
			SetPaymentMethodAndPlaceOrderInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SetPaymentMethodAndPlaceOrderInput.class);
  
			PlaceOrderOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.setPaymentMethodAndPlaceOrder(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("setPaymentMethodAndPlaceOrder: 1 result found");
			else
				logger.debug("setPaymentMethodAndPlaceOrder: no result found");

			return ret;
		};
	}


	public DataFetcher<SetPaymentMethodOnCartOutput> dataFetchersDelegateMutationSetPaymentMethodOnCart() {
		return dataFetchingEnvironment -> {
			SetPaymentMethodOnCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SetPaymentMethodOnCartInput.class);
  
			SetPaymentMethodOnCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.setPaymentMethodOnCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("setPaymentMethodOnCart: 1 result found");
			else
				logger.debug("setPaymentMethodOnCart: no result found");

			return ret;
		};
	}


	public DataFetcher<SetShippingAddressesOnCartOutput> dataFetchersDelegateMutationSetShippingAddressesOnCart() {
		return dataFetchingEnvironment -> {
			SetShippingAddressesOnCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SetShippingAddressesOnCartInput.class);
  
			SetShippingAddressesOnCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.setShippingAddressesOnCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("setShippingAddressesOnCart: 1 result found");
			else
				logger.debug("setShippingAddressesOnCart: no result found");

			return ret;
		};
	}


	public DataFetcher<SetShippingMethodsOnCartOutput> dataFetchersDelegateMutationSetShippingMethodsOnCart() {
		return dataFetchingEnvironment -> {
			SetShippingMethodsOnCartInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), SetShippingMethodsOnCartInput.class);
  
			SetShippingMethodsOnCartOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.setShippingMethodsOnCart(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("setShippingMethodsOnCart: 1 result found");
			else
				logger.debug("setShippingMethodsOnCart: no result found");

			return ret;
		};
	}


	public DataFetcher<UpdateCartItemsOutput> dataFetchersDelegateMutationUpdateCartItems() {
		return dataFetchingEnvironment -> {
			UpdateCartItemsInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), UpdateCartItemsInput.class);
  
			UpdateCartItemsOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.updateCartItems(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("updateCartItems: 1 result found");
			else
				logger.debug("updateCartItems: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerOutput> dataFetchersDelegateMutationUpdateCustomer() {
		return dataFetchingEnvironment -> {
			CustomerInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), CustomerInput.class);
  
			CustomerOutput ret = null;
			try {
				ret = dataFetchersDelegateMutation.updateCustomer(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("updateCustomer: 1 result found");
			else
				logger.debug("updateCustomer: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerAddress> dataFetchersDelegateMutationUpdateCustomerAddress() {
		return dataFetchingEnvironment -> {
			Integer id = dataFetchingEnvironment.getArgument("id");
			CustomerAddressInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), CustomerAddressInput.class);
  
			CustomerAddress ret = null;
			try {
				ret = dataFetchersDelegateMutation.updateCustomerAddress(dataFetchingEnvironment, id, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("updateCustomerAddress: 1 result found");
			else
				logger.debug("updateCustomerAddress: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePayflowProResponseOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegatePayflowProResponseOutputCart() {
		return dataFetchingEnvironment -> {
  			PayflowProResponseOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegatePayflowProResponseOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegatePayflowProResponseOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			PayflowProResponseOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegatePayflowProResponseOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegatePayflowProResponseOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePaypalExpressToken
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<PaypalExpressUrlList> dataFetchersDelegatePaypalExpressTokenPaypal_urls() {
		return dataFetchingEnvironment -> {
  			PaypalExpressToken source = dataFetchingEnvironment.getSource();

			PaypalExpressUrlList ret = null;
			try {
				ret = dataFetchersDelegatePaypalExpressToken.paypal_urls(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("paypal_urls: 1 result found");
			else
				logger.debug("paypal_urls: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePaypalExpressTokenOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<PaypalExpressUrlList> dataFetchersDelegatePaypalExpressTokenOutputPaypal_urls() {
		return dataFetchingEnvironment -> {
  			PaypalExpressTokenOutput source = dataFetchingEnvironment.getSource();

			PaypalExpressUrlList ret = null;
			try {
				ret = dataFetchersDelegatePaypalExpressTokenOutput.paypal_urls(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("paypal_urls: 1 result found");
			else
				logger.debug("paypal_urls: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePlaceOrderOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Order> dataFetchersDelegatePlaceOrderOutputOrder() {
		return dataFetchingEnvironment -> {
  			PlaceOrderOutput source = dataFetchingEnvironment.getSource();

			Order ret = null;
			try {
				ret = dataFetchersDelegatePlaceOrderOutput.order(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("order: 1 result found");
			else
				logger.debug("order: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePrice
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<PriceAdjustment>> dataFetchersDelegatePriceAdjustments() {
		return dataFetchingEnvironment -> {
  			Price source = dataFetchingEnvironment.getSource();

			 List<PriceAdjustment> ret = dataFetchersDelegatePrice.adjustments(dataFetchingEnvironment, source);
			logger.debug("adjustments: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegatePriceAmount() {
		return dataFetchingEnvironment -> {
  			Price source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegatePrice.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePriceAdjustment
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegatePriceAdjustmentAmount() {
		return dataFetchingEnvironment -> {
  			PriceAdjustment source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegatePriceAdjustment.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegatePriceRange
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductPrice> dataFetchersDelegatePriceRangeMaximum_price() {
		return dataFetchingEnvironment -> {
  			PriceRange source = dataFetchingEnvironment.getSource();

			ProductPrice ret = null;
			try {
				ret = dataFetchersDelegatePriceRange.maximum_price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("maximum_price: 1 result found");
			else
				logger.debug("maximum_price: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductPrice> dataFetchersDelegatePriceRangeMinimum_price() {
		return dataFetchingEnvironment -> {
  			PriceRange source = dataFetchingEnvironment.getSource();

			ProductPrice ret = null;
			try {
				ret = dataFetchersDelegatePriceRange.minimum_price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("minimum_price: 1 result found");
			else
				logger.debug("minimum_price: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateProductPrice
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductDiscount> dataFetchersDelegateProductPriceDiscount() {
		return dataFetchingEnvironment -> {
  			ProductPrice source = dataFetchingEnvironment.getSource();

			ProductDiscount ret = null;
			try {
				ret = dataFetchersDelegateProductPrice.discount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("discount: 1 result found");
			else
				logger.debug("discount: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateProductPriceFinal_price() {
		return dataFetchingEnvironment -> {
  			ProductPrice source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateProductPrice.final_price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("final_price: 1 result found");
			else
				logger.debug("final_price: no result found");

			return ret;
		};
	}


	public DataFetcher<List<FixedProductTax>> dataFetchersDelegateProductPriceFixed_product_taxes() {
		return dataFetchingEnvironment -> {
  			ProductPrice source = dataFetchingEnvironment.getSource();

			 List<FixedProductTax> ret = dataFetchersDelegateProductPrice.fixed_product_taxes(dataFetchingEnvironment, source);
			logger.debug("fixed_product_taxes: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateProductPriceRegular_price() {
		return dataFetchingEnvironment -> {
  			ProductPrice source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateProductPrice.regular_price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("regular_price: 1 result found");
			else
				logger.debug("regular_price: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateProductPrices
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Price> dataFetchersDelegateProductPricesMaximalPrice() {
		return dataFetchingEnvironment -> {
  			ProductPrices source = dataFetchingEnvironment.getSource();

			Price ret = null;
			try {
				ret = dataFetchersDelegateProductPrices.maximalPrice(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("maximalPrice: 1 result found");
			else
				logger.debug("maximalPrice: no result found");

			return ret;
		};
	}


	public DataFetcher<Price> dataFetchersDelegateProductPricesMinimalPrice() {
		return dataFetchingEnvironment -> {
  			ProductPrices source = dataFetchingEnvironment.getSource();

			Price ret = null;
			try {
				ret = dataFetchersDelegateProductPrices.minimalPrice(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("minimalPrice: 1 result found");
			else
				logger.debug("minimalPrice: no result found");

			return ret;
		};
	}


	public DataFetcher<Price> dataFetchersDelegateProductPricesRegularPrice() {
		return dataFetchingEnvironment -> {
  			ProductPrices source = dataFetchingEnvironment.getSource();

			Price ret = null;
			try {
				ret = dataFetchersDelegateProductPrices.regularPrice(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("regularPrice: 1 result found");
			else
				logger.debug("regularPrice: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateProducts
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<Aggregation>> dataFetchersDelegateProductsAggregations() {
		return dataFetchingEnvironment -> {
  			Products source = dataFetchingEnvironment.getSource();

			 List<Aggregation> ret = dataFetchersDelegateProducts.aggregations(dataFetchingEnvironment, source);
			logger.debug("aggregations: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<LayerFilter>> dataFetchersDelegateProductsFilters() {
		return dataFetchingEnvironment -> {
  			Products source = dataFetchingEnvironment.getSource();

			 List<LayerFilter> ret = dataFetchersDelegateProducts.filters(dataFetchingEnvironment, source);
			logger.debug("filters: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateProductsItems() {
		return dataFetchingEnvironment -> {
  			Products source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateProducts.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<SearchResultPageInfo> dataFetchersDelegateProductsPage_info() {
		return dataFetchingEnvironment -> {
  			Products source = dataFetchingEnvironment.getSource();

			SearchResultPageInfo ret = null;
			try {
				ret = dataFetchersDelegateProducts.page_info(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("page_info: 1 result found");
			else
				logger.debug("page_info: no result found");

			return ret;
		};
	}


	public DataFetcher<SortFields> dataFetchersDelegateProductsSort_fields() {
		return dataFetchingEnvironment -> {
  			Products source = dataFetchingEnvironment.getSource();

			SortFields ret = null;
			try {
				ret = dataFetchersDelegateProducts.sort_fields(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("sort_fields: 1 result found");
			else
				logger.debug("sort_fields: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateProductVideo
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductMediaGalleryEntriesVideoContent> dataFetchersDelegateProductVideoVideo_content() {
		return dataFetchingEnvironment -> {
  			ProductVideo source = dataFetchingEnvironment.getSource();

			ProductMediaGalleryEntriesVideoContent ret = null;
			try {
				ret = dataFetchersDelegateProductVideo.video_content(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("video_content: 1 result found");
			else
				logger.debug("video_content: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateQuery
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateQueryCart() {
		return dataFetchingEnvironment -> {
			String cart_id = dataFetchingEnvironment.getArgument("cart_id");
  
			Cart ret = null;
			try {
				ret = dataFetchersDelegateQuery.cart(dataFetchingEnvironment, cart_id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CategoryTree> dataFetchersDelegateQueryCategory() {
		return dataFetchingEnvironment -> {
			Integer id = dataFetchingEnvironment.getArgument("id");
  
			CategoryTree ret = null;
			try {
				ret = dataFetchersDelegateQuery.category(dataFetchingEnvironment, id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("category: 1 result found");
			else
				logger.debug("category: no result found");

			return ret;
		};
	}


	public DataFetcher<List<CategoryTree>> dataFetchersDelegateQueryCategoryList() {
		return dataFetchingEnvironment -> {
			CategoryFilterInput filters = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("filters"), CategoryFilterInput.class);
  
			 List<CategoryTree> ret = dataFetchersDelegateQuery.categoryList(dataFetchingEnvironment, filters);
			logger.debug("categoryList: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CheckoutAgreement>> dataFetchersDelegateQueryCheckoutAgreements() {
		return dataFetchingEnvironment -> {
  
			 List<CheckoutAgreement> ret = dataFetchersDelegateQuery.checkoutAgreements(dataFetchingEnvironment);
			logger.debug("checkoutAgreements: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CmsBlocks> dataFetchersDelegateQueryCmsBlocks() {
		return dataFetchingEnvironment -> {
			List<String> identifiers = dataFetchingEnvironment.getArgument("identifiers");
  
			CmsBlocks ret = null;
			try {
				ret = dataFetchersDelegateQuery.cmsBlocks(dataFetchingEnvironment, identifiers);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cmsBlocks: 1 result found");
			else
				logger.debug("cmsBlocks: no result found");

			return ret;
		};
	}


	public DataFetcher<CmsPage> dataFetchersDelegateQueryCmsPage() {
		return dataFetchingEnvironment -> {
			Integer id = dataFetchingEnvironment.getArgument("id");
			String identifier = dataFetchingEnvironment.getArgument("identifier");
  
			CmsPage ret = null;
			try {
				ret = dataFetchersDelegateQuery.cmsPage(dataFetchingEnvironment, id, identifier);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cmsPage: 1 result found");
			else
				logger.debug("cmsPage: no result found");

			return ret;
		};
	}


	public DataFetcher<List<Country>> dataFetchersDelegateQueryCountries() {
		return dataFetchingEnvironment -> {
  
			 List<Country> ret = dataFetchersDelegateQuery.countries(dataFetchingEnvironment);
			logger.debug("countries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Country> dataFetchersDelegateQueryCountry() {
		return dataFetchingEnvironment -> {
			String id = dataFetchingEnvironment.getArgument("id");
  
			Country ret = null;
			try {
				ret = dataFetchersDelegateQuery.country(dataFetchingEnvironment, id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("country: 1 result found");
			else
				logger.debug("country: no result found");

			return ret;
		};
	}


	public DataFetcher<Currency> dataFetchersDelegateQueryCurrency() {
		return dataFetchingEnvironment -> {
  
			Currency ret = null;
			try {
				ret = dataFetchersDelegateQuery.currency(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("currency: 1 result found");
			else
				logger.debug("currency: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomAttributeMetadata> dataFetchersDelegateQueryCustomAttributeMetadata() {
		return dataFetchingEnvironment -> {
			List<AttributeInput> attributes = graphqlUtils.getListInputObjects((List<Map<String, Object>>) dataFetchingEnvironment.getArgument("attributes"), AttributeInput.class);
  
			CustomAttributeMetadata ret = null;
			try {
				ret = dataFetchersDelegateQuery.customAttributeMetadata(dataFetchingEnvironment, attributes);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customAttributeMetadata: 1 result found");
			else
				logger.debug("customAttributeMetadata: no result found");

			return ret;
		};
	}


	public DataFetcher<Customer> dataFetchersDelegateQueryCustomer() {
		return dataFetchingEnvironment -> {
  
			Customer ret = null;
			try {
				ret = dataFetchersDelegateQuery.customer(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customer: 1 result found");
			else
				logger.debug("customer: no result found");

			return ret;
		};
	}


	public DataFetcher<Cart> dataFetchersDelegateQueryCustomerCart() {
		return dataFetchingEnvironment -> {
  
			Cart ret = null;
			try {
				ret = dataFetchersDelegateQuery.customerCart(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customerCart: 1 result found");
			else
				logger.debug("customerCart: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerDownloadableProducts> dataFetchersDelegateQueryCustomerDownloadableProducts() {
		return dataFetchingEnvironment -> {
  
			CustomerDownloadableProducts ret = null;
			try {
				ret = dataFetchersDelegateQuery.customerDownloadableProducts(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customerDownloadableProducts: 1 result found");
			else
				logger.debug("customerDownloadableProducts: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerOrders> dataFetchersDelegateQueryCustomerOrders() {
		return dataFetchingEnvironment -> {
  
			CustomerOrders ret = null;
			try {
				ret = dataFetchersDelegateQuery.customerOrders(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customerOrders: 1 result found");
			else
				logger.debug("customerOrders: no result found");

			return ret;
		};
	}


	public DataFetcher<CustomerPaymentTokens> dataFetchersDelegateQueryCustomerPaymentTokens() {
		return dataFetchingEnvironment -> {
  
			CustomerPaymentTokens ret = null;
			try {
				ret = dataFetchersDelegateQuery.customerPaymentTokens(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("customerPaymentTokens: 1 result found");
			else
				logger.debug("customerPaymentTokens: no result found");

			return ret;
		};
	}


	public DataFetcher<HostedProUrl> dataFetchersDelegateQueryGetHostedProUrl() {
		return dataFetchingEnvironment -> {
			HostedProUrlInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), HostedProUrlInput.class);
  
			HostedProUrl ret = null;
			try {
				ret = dataFetchersDelegateQuery.getHostedProUrl(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("getHostedProUrl: 1 result found");
			else
				logger.debug("getHostedProUrl: no result found");

			return ret;
		};
	}


	public DataFetcher<PayflowLinkToken> dataFetchersDelegateQueryGetPayflowLinkToken() {
		return dataFetchingEnvironment -> {
			PayflowLinkTokenInput input = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("input"), PayflowLinkTokenInput.class);
  
			PayflowLinkToken ret = null;
			try {
				ret = dataFetchersDelegateQuery.getPayflowLinkToken(dataFetchingEnvironment, input);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("getPayflowLinkToken: 1 result found");
			else
				logger.debug("getPayflowLinkToken: no result found");

			return ret;
		};
	}


	public DataFetcher<IsEmailAvailableOutput> dataFetchersDelegateQueryIsEmailAvailable() {
		return dataFetchingEnvironment -> {
			String email = dataFetchingEnvironment.getArgument("email");
  
			IsEmailAvailableOutput ret = null;
			try {
				ret = dataFetchersDelegateQuery.isEmailAvailable(dataFetchingEnvironment, email);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("isEmailAvailable: 1 result found");
			else
				logger.debug("isEmailAvailable: no result found");

			return ret;
		};
	}


	public DataFetcher<Products> dataFetchersDelegateQueryProducts() {
		return dataFetchingEnvironment -> {
			String search = dataFetchingEnvironment.getArgument("search");
			ProductAttributeFilterInput filter = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("filter"), ProductAttributeFilterInput.class);
			Integer pageSize = dataFetchingEnvironment.getArgument("pageSize");
			Integer currentPage = dataFetchingEnvironment.getArgument("currentPage");
			//ProductAttributeSortInput sort = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("sort"), ProductAttributeSortInput.class);

			ProductAttributeSortInput sort = ProductAttributeSortInputFactory.getProductAttributeSortInputInstance((Map<String, Object>) dataFetchingEnvironment.getArgument("sort"));

			Products ret = null;
			try {
				ret = dataFetchersDelegateQuery.products(dataFetchingEnvironment, search, filter, pageSize, currentPage, sort);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("products: 1 result found");
			else
				logger.debug("products: no result found");

			return ret;
		};
	}


	public DataFetcher<StoreConfig> dataFetchersDelegateQueryStoreConfig() {
		return dataFetchingEnvironment -> {
  
			StoreConfig ret = null;
			try {
				ret = dataFetchersDelegateQuery.storeConfig(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("storeConfig: 1 result found");
			else
				logger.debug("storeConfig: no result found");

			return ret;
		};
	}


	public DataFetcher<EntityUrl> dataFetchersDelegateQueryUrlResolver() {
		return dataFetchingEnvironment -> {
			String url = dataFetchingEnvironment.getArgument("url");
  
			EntityUrl ret = null;
			try {
				ret = dataFetchersDelegateQuery.urlResolver(dataFetchingEnvironment, url);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("urlResolver: 1 result found");
			else
				logger.debug("urlResolver: no result found");

			return ret;
		};
	}


	public DataFetcher<WishlistOutput> dataFetchersDelegateQueryWishlist() {
		return dataFetchingEnvironment -> {
  
			WishlistOutput ret = null;
			try {
				ret = dataFetchersDelegateQuery.wishlist(dataFetchingEnvironment);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("wishlist: 1 result found");
			else
				logger.debug("wishlist: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateRemoveCouponFromCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateRemoveCouponFromCartOutputCart() {
		return dataFetchingEnvironment -> {
  			RemoveCouponFromCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateRemoveCouponFromCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateRemoveCouponFromCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			RemoveCouponFromCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateRemoveCouponFromCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateRemoveCouponFromCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateRemoveItemFromCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateRemoveItemFromCartOutputCart() {
		return dataFetchingEnvironment -> {
  			RemoveItemFromCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateRemoveItemFromCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateRemoveItemFromCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			RemoveItemFromCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateRemoveItemFromCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateRemoveItemFromCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSelectedBundleOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedBundleOptionValue>> dataFetchersDelegateSelectedBundleOptionValues() {
		return dataFetchingEnvironment -> {
  			SelectedBundleOption source = dataFetchingEnvironment.getSource();

			 List<SelectedBundleOptionValue> ret = dataFetchersDelegateSelectedBundleOption.values(dataFetchingEnvironment, source);
			logger.debug("values: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSelectedCustomizableOption
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedCustomizableOptionValue>> dataFetchersDelegateSelectedCustomizableOptionValues() {
		return dataFetchingEnvironment -> {
  			SelectedCustomizableOption source = dataFetchingEnvironment.getSource();

			 List<SelectedCustomizableOptionValue> ret = dataFetchersDelegateSelectedCustomizableOption.values(dataFetchingEnvironment, source);
			logger.debug("values: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSelectedCustomizableOptionValue
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CartItemSelectedOptionValuePrice> dataFetchersDelegateSelectedCustomizableOptionValuePrice() {
		return dataFetchingEnvironment -> {
  			SelectedCustomizableOptionValue source = dataFetchingEnvironment.getSource();

			CartItemSelectedOptionValuePrice ret = null;
			try {
				ret = dataFetchersDelegateSelectedCustomizableOptionValue.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSelectedShippingMethod
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Money> dataFetchersDelegateSelectedShippingMethodAmount() {
		return dataFetchingEnvironment -> {
  			SelectedShippingMethod source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateSelectedShippingMethod.amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("amount: 1 result found");
			else
				logger.debug("amount: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateSelectedShippingMethodBase_amount() {
		return dataFetchingEnvironment -> {
  			SelectedShippingMethod source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateSelectedShippingMethod.base_amount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("base_amount: 1 result found");
			else
				logger.debug("base_amount: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSendEmailToFriendOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SendEmailToFriendRecipient>> dataFetchersDelegateSendEmailToFriendOutputRecipients() {
		return dataFetchingEnvironment -> {
  			SendEmailToFriendOutput source = dataFetchingEnvironment.getSource();

			 List<SendEmailToFriendRecipient> ret = dataFetchersDelegateSendEmailToFriendOutput.recipients(dataFetchingEnvironment, source);
			logger.debug("recipients: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<SendEmailToFriendSender> dataFetchersDelegateSendEmailToFriendOutputSender() {
		return dataFetchingEnvironment -> {
  			SendEmailToFriendOutput source = dataFetchingEnvironment.getSource();

			SendEmailToFriendSender ret = null;
			try {
				ret = dataFetchersDelegateSendEmailToFriendOutput.sender(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("sender: 1 result found");
			else
				logger.debug("sender: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSetBillingAddressOnCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateSetBillingAddressOnCartOutputCart() {
		return dataFetchingEnvironment -> {
  			SetBillingAddressOnCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateSetBillingAddressOnCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateSetBillingAddressOnCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			SetBillingAddressOnCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateSetBillingAddressOnCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateSetBillingAddressOnCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSetGuestEmailOnCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateSetGuestEmailOnCartOutputCart() {
		return dataFetchingEnvironment -> {
  			SetGuestEmailOnCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateSetGuestEmailOnCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateSetGuestEmailOnCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			SetGuestEmailOnCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateSetGuestEmailOnCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateSetGuestEmailOnCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSetPaymentMethodOnCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateSetPaymentMethodOnCartOutputCart() {
		return dataFetchingEnvironment -> {
  			SetPaymentMethodOnCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateSetPaymentMethodOnCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateSetPaymentMethodOnCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			SetPaymentMethodOnCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateSetPaymentMethodOnCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateSetPaymentMethodOnCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSetShippingAddressesOnCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateSetShippingAddressesOnCartOutputCart() {
		return dataFetchingEnvironment -> {
  			SetShippingAddressesOnCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateSetShippingAddressesOnCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateSetShippingAddressesOnCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			SetShippingAddressesOnCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateSetShippingAddressesOnCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateSetShippingAddressesOnCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSetShippingMethodsOnCartOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateSetShippingMethodsOnCartOutputCart() {
		return dataFetchingEnvironment -> {
  			SetShippingMethodsOnCartOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateSetShippingMethodsOnCartOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateSetShippingMethodsOnCartOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			SetShippingMethodsOnCartOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateSetShippingMethodsOnCartOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateSetShippingMethodsOnCartOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateShippingCartAddress
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<AvailableShippingMethod>> dataFetchersDelegateShippingCartAddressAvailable_shipping_methods() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			 List<AvailableShippingMethod> ret = dataFetchersDelegateShippingCartAddress.available_shipping_methods(dataFetchingEnvironment, source);
			logger.debug("available_shipping_methods: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CartItemQuantity>> dataFetchersDelegateShippingCartAddressCart_items() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			 List<CartItemQuantity> ret = dataFetchersDelegateShippingCartAddress.cart_items(dataFetchingEnvironment, source);
			logger.debug("cart_items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CartItemInterface>> dataFetchersDelegateShippingCartAddressCart_items_v2() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			 List<CartItemInterface> ret = dataFetchersDelegateShippingCartAddress.cart_items_v2(dataFetchingEnvironment, source);
			logger.debug("cart_items_v2: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartAddressCountry> dataFetchersDelegateShippingCartAddressCountry() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			CartAddressCountry ret = null;
			try {
				ret = dataFetchersDelegateShippingCartAddress.country(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("country: 1 result found");
			else
				logger.debug("country: no result found");

			return ret;
		};
	}


	public DataFetcher<CartAddressRegion> dataFetchersDelegateShippingCartAddressRegion() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			CartAddressRegion ret = null;
			try {
				ret = dataFetchersDelegateShippingCartAddress.region(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("region: 1 result found");
			else
				logger.debug("region: no result found");

			return ret;
		};
	}


	public DataFetcher<SelectedShippingMethod> dataFetchersDelegateShippingCartAddressSelected_shipping_method() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			SelectedShippingMethod ret = null;
			try {
				ret = dataFetchersDelegateShippingCartAddress.selected_shipping_method(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("selected_shipping_method: 1 result found");
			else
				logger.debug("selected_shipping_method: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateShippingCartAddressStreet() {
		return dataFetchingEnvironment -> {
  			ShippingCartAddress source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateShippingCartAddress.street(dataFetchingEnvironment, source);
			logger.debug("street: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSimpleCartItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedCustomizableOption>> dataFetchersDelegateSimpleCartItemCustomizable_options() {
		return dataFetchingEnvironment -> {
  			SimpleCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedCustomizableOption> ret = dataFetchersDelegateSimpleCartItem.customizable_options(dataFetchingEnvironment, source);
			logger.debug("customizable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartItemPrices> dataFetchersDelegateSimpleCartItemPrices() {
		return dataFetchingEnvironment -> {
  			SimpleCartItem source = dataFetchingEnvironment.getSource();

			CartItemPrices ret = null;
			try {
				ret = dataFetchersDelegateSimpleCartItem.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductInterface> dataFetchersDelegateSimpleCartItemProduct() {
		return dataFetchingEnvironment -> {
  			SimpleCartItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateSimpleCartItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSimpleProduct
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateSimpleProductCategories() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateSimpleProduct.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateSimpleProductCrosssell_products() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateSimpleProduct.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateSimpleProductDescription() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateSimpleProductImage() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateSimpleProductMedia_gallery() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateSimpleProduct.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateSimpleProductMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateSimpleProduct.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CustomizableOptionInterface>> dataFetchersDelegateSimpleProductOptions() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<CustomizableOptionInterface> ret = dataFetchersDelegateSimpleProduct.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateSimpleProductPrice() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateSimpleProductPrice_range() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateSimpleProductPrice_tiers() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateSimpleProduct.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateSimpleProductProduct_links() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateSimpleProduct.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateSimpleProductRelated_products() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateSimpleProduct.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateSimpleProductShort_description() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateSimpleProductSmall_image() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateSimpleProductThumbnail() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateSimpleProduct.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateSimpleProductTier_prices() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateSimpleProduct.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateSimpleProductUpsell_products() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateSimpleProduct.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateSimpleProductUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateSimpleProduct.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateSimpleProductWebsites() {
		return dataFetchingEnvironment -> {
  			SimpleProduct source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateSimpleProduct.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSortFields
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SortField>> dataFetchersDelegateSortFieldsOptions() {
		return dataFetchingEnvironment -> {
  			SortFields source = dataFetchingEnvironment.getSource();

			 List<SortField> ret = dataFetchersDelegateSortFields.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSwatchLayerFilterItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<SwatchData> dataFetchersDelegateSwatchLayerFilterItemSwatch_data() {
		return dataFetchingEnvironment -> {
  			SwatchLayerFilterItem source = dataFetchingEnvironment.getSource();

			SwatchData ret = null;
			try {
				ret = dataFetchersDelegateSwatchLayerFilterItem.swatch_data(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("swatch_data: 1 result found");
			else
				logger.debug("swatch_data: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateTierPrice
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductDiscount> dataFetchersDelegateTierPriceDiscount() {
		return dataFetchingEnvironment -> {
  			TierPrice source = dataFetchingEnvironment.getSource();

			ProductDiscount ret = null;
			try {
				ret = dataFetchersDelegateTierPrice.discount(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("discount: 1 result found");
			else
				logger.debug("discount: no result found");

			return ret;
		};
	}


	public DataFetcher<Money> dataFetchersDelegateTierPriceFinal_price() {
		return dataFetchingEnvironment -> {
  			TierPrice source = dataFetchingEnvironment.getSource();

			Money ret = null;
			try {
				ret = dataFetchersDelegateTierPrice.final_price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("final_price: 1 result found");
			else
				logger.debug("final_price: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateUpdateCartItemsOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<Cart> dataFetchersDelegateUpdateCartItemsOutputCart() {
		return dataFetchingEnvironment -> {
  			UpdateCartItemsOutput source = dataFetchingEnvironment.getSource();

			Cart ret = null;
			try {
				ret = dataFetchersDelegateUpdateCartItemsOutput.cart(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cart: 1 result found");
			else
				logger.debug("cart: no result found");

			return ret;
		};
	}


	public DataFetcher<CompletableFuture<Cart>> dataFetchersDelegateUpdateCartItemsOutputCartWithDataLoader() {
		return dataFetchingEnvironment -> {
  			UpdateCartItemsOutput source = dataFetchingEnvironment.getSource();

			DataLoader<UUID, Cart> dataLoader = dataFetchingEnvironment.getDataLoader("Cart"); 
			
			// This dataLoader may be null. Let's hande that:
			if (dataLoader != null) 
				return dataFetchersDelegateUpdateCartItemsOutput.cart(dataFetchingEnvironment, dataLoader, source);
			else
				return CompletableFuture.supplyAsync(
						() -> dataFetchersDelegateUpdateCartItemsOutput.cart(dataFetchingEnvironment, source));
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateUrlRewrite
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<HttpQueryParameter>> dataFetchersDelegateUrlRewriteParameters() {
		return dataFetchingEnvironment -> {
  			UrlRewrite source = dataFetchingEnvironment.getSource();

			 List<HttpQueryParameter> ret = dataFetchersDelegateUrlRewrite.parameters(dataFetchingEnvironment, source);
			logger.debug("parameters: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateVirtualCartItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<SelectedCustomizableOption>> dataFetchersDelegateVirtualCartItemCustomizable_options() {
		return dataFetchingEnvironment -> {
  			VirtualCartItem source = dataFetchingEnvironment.getSource();

			 List<SelectedCustomizableOption> ret = dataFetchersDelegateVirtualCartItem.customizable_options(dataFetchingEnvironment, source);
			logger.debug("customizable_options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CartItemPrices> dataFetchersDelegateVirtualCartItemPrices() {
		return dataFetchingEnvironment -> {
  			VirtualCartItem source = dataFetchingEnvironment.getSource();

			CartItemPrices ret = null;
			try {
				ret = dataFetchersDelegateVirtualCartItem.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductInterface> dataFetchersDelegateVirtualCartItemProduct() {
		return dataFetchingEnvironment -> {
  			VirtualCartItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateVirtualCartItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateVirtualProduct
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateVirtualProductCategories() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateVirtualProduct.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateVirtualProductCrosssell_products() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateVirtualProduct.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateVirtualProductDescription() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateVirtualProductImage() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateVirtualProductMedia_gallery() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateVirtualProduct.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateVirtualProductMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateVirtualProduct.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<CustomizableOptionInterface>> dataFetchersDelegateVirtualProductOptions() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<CustomizableOptionInterface> ret = dataFetchersDelegateVirtualProduct.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateVirtualProductPrice() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateVirtualProductPrice_range() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateVirtualProductPrice_tiers() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateVirtualProduct.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateVirtualProductProduct_links() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateVirtualProduct.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateVirtualProductRelated_products() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateVirtualProduct.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateVirtualProductShort_description() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateVirtualProductSmall_image() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateVirtualProductThumbnail() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateVirtualProduct.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateVirtualProductTier_prices() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateVirtualProduct.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateVirtualProductUpsell_products() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateVirtualProduct.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateVirtualProductUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateVirtualProduct.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateVirtualProductWebsites() {
		return dataFetchingEnvironment -> {
  			VirtualProduct source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateVirtualProduct.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateWishlist
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<WishlistItem>> dataFetchersDelegateWishlistItems() {
		return dataFetchingEnvironment -> {
  			Wishlist source = dataFetchingEnvironment.getSource();

			 List<WishlistItem> ret = dataFetchersDelegateWishlist.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateWishlistItem
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ProductInterface> dataFetchersDelegateWishlistItemProduct() {
		return dataFetchingEnvironment -> {
  			WishlistItem source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateWishlistItem.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateWishlistOutput
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<WishlistItem>> dataFetchersDelegateWishlistOutputItems() {
		return dataFetchingEnvironment -> {
  			WishlistOutput source = dataFetchingEnvironment.getSource();

			 List<WishlistItem> ret = dataFetchersDelegateWishlistOutput.items(dataFetchingEnvironment, source);
			logger.debug("items: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCartAddressInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CartAddressCountry> dataFetchersDelegateCartAddressInterfaceCountry() {
		return dataFetchingEnvironment -> {
  			CartAddressInterface source = dataFetchingEnvironment.getSource();

			CartAddressCountry ret = null;
			try {
				ret = dataFetchersDelegateCartAddressInterface.country(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("country: 1 result found");
			else
				logger.debug("country: no result found");

			return ret;
		};
	}


	public DataFetcher<CartAddressRegion> dataFetchersDelegateCartAddressInterfaceRegion() {
		return dataFetchingEnvironment -> {
  			CartAddressInterface source = dataFetchingEnvironment.getSource();

			CartAddressRegion ret = null;
			try {
				ret = dataFetchersDelegateCartAddressInterface.region(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("region: 1 result found");
			else
				logger.debug("region: no result found");

			return ret;
		};
	}


	public DataFetcher<List<String>> dataFetchersDelegateCartAddressInterfaceStreet() {
		return dataFetchingEnvironment -> {
  			CartAddressInterface source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateCartAddressInterface.street(dataFetchingEnvironment, source);
			logger.debug("street: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCartItemInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<CartItemPrices> dataFetchersDelegateCartItemInterfacePrices() {
		return dataFetchingEnvironment -> {
  			CartItemInterface source = dataFetchingEnvironment.getSource();

			CartItemPrices ret = null;
			try {
				ret = dataFetchersDelegateCartItemInterface.prices(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("prices: 1 result found");
			else
				logger.debug("prices: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductInterface> dataFetchersDelegateCartItemInterfaceProduct() {
		return dataFetchingEnvironment -> {
  			CartItemInterface source = dataFetchingEnvironment.getSource();

			ProductInterface ret = null;
			try {
				ret = dataFetchersDelegateCartItemInterface.product(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("product: 1 result found");
			else
				logger.debug("product: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCategoryInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<String>> dataFetchersDelegateCategoryInterfaceAvailable_sort_by() {
		return dataFetchingEnvironment -> {
  			CategoryInterface source = dataFetchingEnvironment.getSource();

			 List<String> ret = dataFetchersDelegateCategoryInterface.available_sort_by(dataFetchingEnvironment, source);
			logger.debug("available_sort_by: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Breadcrumb>> dataFetchersDelegateCategoryInterfaceBreadcrumbs() {
		return dataFetchingEnvironment -> {
  			CategoryInterface source = dataFetchingEnvironment.getSource();

			 List<Breadcrumb> ret = dataFetchersDelegateCategoryInterface.breadcrumbs(dataFetchingEnvironment, source);
			logger.debug("breadcrumbs: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<CmsBlock> dataFetchersDelegateCategoryInterfaceCms_block() {
		return dataFetchingEnvironment -> {
  			CategoryInterface source = dataFetchingEnvironment.getSource();

			CmsBlock ret = null;
			try {
				ret = dataFetchersDelegateCategoryInterface.cms_block(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("cms_block: 1 result found");
			else
				logger.debug("cms_block: no result found");

			return ret;
		};
	}


	public DataFetcher<CategoryProducts> dataFetchersDelegateCategoryInterfaceProducts() {
		return dataFetchingEnvironment -> {
			Integer pageSize = dataFetchingEnvironment.getArgument("pageSize");
			Integer currentPage = dataFetchingEnvironment.getArgument("currentPage");
			//ProductAttributeSortInput sort = graphqlUtils.getInputObject((Map<String, Object>) dataFetchingEnvironment.getArgument("sort"), ProductAttributeSortInput.class);

			ProductAttributeSortInput sort = ProductAttributeSortInputFactory.getProductAttributeSortInputInstance((Map<String, Object>) dataFetchingEnvironment.getArgument("sort"));


			CategoryInterface source = dataFetchingEnvironment.getSource();

			CategoryProducts ret = null;
			try {
				ret = dataFetchersDelegateCategoryInterface.products(dataFetchingEnvironment, source, pageSize, currentPage, sort);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("products: 1 result found");
			else
				logger.debug("products: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateCustomizableProductInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CustomizableOptionInterface>> dataFetchersDelegateCustomizableProductInterfaceOptions() {
		return dataFetchingEnvironment -> {
  			CustomizableProductInterface source = dataFetchingEnvironment.getSource();

			 List<CustomizableOptionInterface> ret = dataFetchersDelegateCustomizableProductInterface.options(dataFetchingEnvironment, source);
			logger.debug("options: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateProductInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<List<CategoryInterface>> dataFetchersDelegateProductInterfaceCategories() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<CategoryInterface> ret = dataFetchersDelegateProductInterface.categories(dataFetchingEnvironment, source);
			logger.debug("categories: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateProductInterfaceCrosssell_products() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateProductInterface.crosssell_products(dataFetchingEnvironment, source);
			logger.debug("crosssell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateProductInterfaceDescription() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("description: 1 result found");
			else
				logger.debug("description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateProductInterfaceImage() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("image: 1 result found");
			else
				logger.debug("image: no result found");

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryInterface>> dataFetchersDelegateProductInterfaceMedia_gallery() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryInterface> ret = dataFetchersDelegateProductInterface.media_gallery(dataFetchingEnvironment, source);
			logger.debug("media_gallery: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<MediaGalleryEntry>> dataFetchersDelegateProductInterfaceMedia_gallery_entries() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<MediaGalleryEntry> ret = dataFetchersDelegateProductInterface.media_gallery_entries(dataFetchingEnvironment, source);
			logger.debug("media_gallery_entries: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ProductPrices> dataFetchersDelegateProductInterfacePrice() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			ProductPrices ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.price(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price: 1 result found");
			else
				logger.debug("price: no result found");

			return ret;
		};
	}


	public DataFetcher<PriceRange> dataFetchersDelegateProductInterfacePrice_range() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			PriceRange ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.price_range(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("price_range: 1 result found");
			else
				logger.debug("price_range: no result found");

			return ret;
		};
	}


	public DataFetcher<List<TierPrice>> dataFetchersDelegateProductInterfacePrice_tiers() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<TierPrice> ret = dataFetchersDelegateProductInterface.price_tiers(dataFetchingEnvironment, source);
			logger.debug("price_tiers: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductLinksInterface>> dataFetchersDelegateProductInterfaceProduct_links() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<ProductLinksInterface> ret = dataFetchersDelegateProductInterface.product_links(dataFetchingEnvironment, source);
			logger.debug("product_links: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateProductInterfaceRelated_products() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateProductInterface.related_products(dataFetchingEnvironment, source);
			logger.debug("related_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<ComplexTextValue> dataFetchersDelegateProductInterfaceShort_description() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			ComplexTextValue ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.short_description(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("short_description: 1 result found");
			else
				logger.debug("short_description: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateProductInterfaceSmall_image() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.small_image(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("small_image: 1 result found");
			else
				logger.debug("small_image: no result found");

			return ret;
		};
	}


	public DataFetcher<ProductImage> dataFetchersDelegateProductInterfaceThumbnail() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			ProductImage ret = null;
			try {
				ret = dataFetchersDelegateProductInterface.thumbnail(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("thumbnail: 1 result found");
			else
				logger.debug("thumbnail: no result found");

			return ret;
		};
	}


	public DataFetcher<List<ProductTierPrices>> dataFetchersDelegateProductInterfaceTier_prices() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<ProductTierPrices> ret = dataFetchersDelegateProductInterface.tier_prices(dataFetchingEnvironment, source);
			logger.debug("tier_prices: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<ProductInterface>> dataFetchersDelegateProductInterfaceUpsell_products() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<ProductInterface> ret = dataFetchersDelegateProductInterface.upsell_products(dataFetchingEnvironment, source);
			logger.debug("upsell_products: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<UrlRewrite>> dataFetchersDelegateProductInterfaceUrl_rewrites() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<UrlRewrite> ret = dataFetchersDelegateProductInterface.url_rewrites(dataFetchingEnvironment, source);
			logger.debug("url_rewrites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Website>> dataFetchersDelegateProductInterfaceWebsites() {
		return dataFetchingEnvironment -> {
  			ProductInterface source = dataFetchingEnvironment.getSource();

			 List<Website> ret = dataFetchersDelegateProductInterface.websites(dataFetchingEnvironment, source);
			logger.debug("websites: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateSwatchLayerFilterItemInterface
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<SwatchData> dataFetchersDelegateSwatchLayerFilterItemInterfaceSwatch_data() {
		return dataFetchingEnvironment -> {
  			SwatchLayerFilterItemInterface source = dataFetchingEnvironment.getSource();

			SwatchData ret = null;
			try {
				ret = dataFetchersDelegateSwatchLayerFilterItemInterface.swatch_data(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("swatch_data: 1 result found");
			else
				logger.debug("swatch_data: no result found");

			return ret;
		};
	}

}
