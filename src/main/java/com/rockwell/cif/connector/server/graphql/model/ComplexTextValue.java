/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("ComplexTextValue")
public class ComplexTextValue  {

	public ComplexTextValue(){
		// No action
	}

	public ComplexTextValue(String html) {
		this.html = html;
	}

	@GraphQLScalar(fieldName = "html", graphQLTypeName = "String", javaClass = String.class)
	String html;



	public void setHtml(String html) {
		this.html = html;
	}

	public String getHtml() {
		return html;
	}

    public String toString() {
        return "ComplexTextValue {"
				+ "html: " + html
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Html("html");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String html;


		public Builder withHtml(String html) {
			this.html = html;
			return this;
		}

		public ComplexTextValue build() {
			ComplexTextValue _object = new ComplexTextValue();
			_object.setHtml(html);
			return _object;
		}
	}
}
