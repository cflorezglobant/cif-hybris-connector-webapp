/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.fetcher;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import graphql.schema.DataFetchingEnvironment;

import java.lang.Integer;
import java.lang.String;

import com.rockwell.cif.connector.server.graphql.model.AttributeInput;
import com.rockwell.cif.connector.server.graphql.model.Cart;
import com.rockwell.cif.connector.server.graphql.model.CategoryFilterInput;
import com.rockwell.cif.connector.server.graphql.model.CategoryTree;
import com.rockwell.cif.connector.server.graphql.model.CheckoutAgreement;
import com.rockwell.cif.connector.server.graphql.model.CmsBlocks;
import com.rockwell.cif.connector.server.graphql.model.CmsPage;
import com.rockwell.cif.connector.server.graphql.model.Country;
import com.rockwell.cif.connector.server.graphql.model.Currency;
import com.rockwell.cif.connector.server.graphql.model.CustomAttributeMetadata;
import com.rockwell.cif.connector.server.graphql.model.Customer;
import com.rockwell.cif.connector.server.graphql.model.CustomerDownloadableProducts;
import com.rockwell.cif.connector.server.graphql.model.CustomerOrders;
import com.rockwell.cif.connector.server.graphql.model.CustomerPaymentTokens;
import com.rockwell.cif.connector.server.graphql.model.EntityUrl;
import com.rockwell.cif.connector.server.graphql.model.HostedProUrl;
import com.rockwell.cif.connector.server.graphql.model.HostedProUrlInput;
import com.rockwell.cif.connector.server.graphql.model.IsEmailAvailableOutput;
import com.rockwell.cif.connector.server.graphql.model.PayflowLinkToken;
import com.rockwell.cif.connector.server.graphql.model.PayflowLinkTokenInput;
import com.rockwell.cif.connector.server.graphql.model.ProductAttributeFilterInput;
import com.rockwell.cif.connector.server.graphql.model.ProductAttributeSortInput;
import com.rockwell.cif.connector.server.graphql.model.Products;
import com.rockwell.cif.connector.server.graphql.model.StoreConfig;
import com.rockwell.cif.connector.server.graphql.model.WishlistOutput;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface DataFetchersDelegateQuery {
	
	/**
	 * This method loads the data for Query.cart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param cart_id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Cart cart(DataFetchingEnvironment dataFetchingEnvironment, String  cart_id);

	/**
	 * This method loads the data for Query.category. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CategoryTree category(DataFetchingEnvironment dataFetchingEnvironment, Integer  id);

	/**
	 * This method loads the data for Query.categoryList. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param filters 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<CategoryTree> categoryList(DataFetchingEnvironment dataFetchingEnvironment, CategoryFilterInput filters);

	/**
	 * This method loads the data for Query.checkoutAgreements. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<CheckoutAgreement> checkoutAgreements(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.cmsBlocks. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param identifiers 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CmsBlocks cmsBlocks(DataFetchingEnvironment dataFetchingEnvironment, List<String>  identifiers);

	/**
	 * This method loads the data for Query.cmsPage. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param identifier 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CmsPage cmsPage(DataFetchingEnvironment dataFetchingEnvironment, Integer  id, String  identifier);

	/**
	 * This method loads the data for Query.countries. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public List<Country> countries(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.country. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Country country(DataFetchingEnvironment dataFetchingEnvironment, String  id);

	/**
	 * This method loads the data for Query.currency. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Currency currency(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.customAttributeMetadata. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param attributes 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomAttributeMetadata customAttributeMetadata(DataFetchingEnvironment dataFetchingEnvironment, List<AttributeInput>  attributes);

	/**
	 * This method loads the data for Query.customer. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Customer customer(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.customerCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Cart customerCart(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.customerDownloadableProducts. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerDownloadableProducts customerDownloadableProducts(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.customerOrders. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerOrders customerOrders(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.customerPaymentTokens. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerPaymentTokens customerPaymentTokens(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.getHostedProUrl. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public HostedProUrl getHostedProUrl(DataFetchingEnvironment dataFetchingEnvironment, HostedProUrlInput  input);

	/**
	 * This method loads the data for Query.getPayflowLinkToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public PayflowLinkToken getPayflowLinkToken(DataFetchingEnvironment dataFetchingEnvironment, PayflowLinkTokenInput  input);

	/**
	 * This method loads the data for Query.isEmailAvailable. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param email 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public IsEmailAvailableOutput isEmailAvailable(DataFetchingEnvironment dataFetchingEnvironment, String  email);

	/**
	 * This method loads the data for Query.products. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param search 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param filter 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param pageSize 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param currentPage 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param sort 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Products products(DataFetchingEnvironment dataFetchingEnvironment, String  search, ProductAttributeFilterInput  filter, Integer  pageSize, Integer  currentPage, ProductAttributeSortInput  sort);

	/**
	 * This method loads the data for Query.storeConfig. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public StoreConfig storeConfig(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Query.urlResolver. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param url 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public EntityUrl urlResolver(DataFetchingEnvironment dataFetchingEnvironment, String  url);

	/**
	 * This method loads the data for Query.wishlist. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public WishlistOutput wishlist(DataFetchingEnvironment dataFetchingEnvironment);

}
