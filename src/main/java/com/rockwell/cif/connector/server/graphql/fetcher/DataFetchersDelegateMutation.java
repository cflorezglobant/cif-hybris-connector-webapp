/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.fetcher;

import java.util.NoSuchElementException;
import java.util.Optional;

import graphql.schema.DataFetchingEnvironment;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;

import com.rockwell.cif.connector.server.graphql.model.AddBundleProductsToCartInput;
import com.rockwell.cif.connector.server.graphql.model.AddBundleProductsToCartOutput;
import com.rockwell.cif.connector.server.graphql.model.AddConfigurableProductsToCartInput;
import com.rockwell.cif.connector.server.graphql.model.AddConfigurableProductsToCartOutput;
import com.rockwell.cif.connector.server.graphql.model.AddDownloadableProductsToCartInput;
import com.rockwell.cif.connector.server.graphql.model.AddDownloadableProductsToCartOutput;
import com.rockwell.cif.connector.server.graphql.model.AddSimpleProductsToCartInput;
import com.rockwell.cif.connector.server.graphql.model.AddSimpleProductsToCartOutput;
import com.rockwell.cif.connector.server.graphql.model.AddVirtualProductsToCartInput;
import com.rockwell.cif.connector.server.graphql.model.AddVirtualProductsToCartOutput;
import com.rockwell.cif.connector.server.graphql.model.ApplyCouponToCartInput;
import com.rockwell.cif.connector.server.graphql.model.ApplyCouponToCartOutput;
import com.rockwell.cif.connector.server.graphql.model.Cart;
import com.rockwell.cif.connector.server.graphql.model.CreatePayflowProTokenOutput;
import com.rockwell.cif.connector.server.graphql.model.Customer;
import com.rockwell.cif.connector.server.graphql.model.CustomerAddress;
import com.rockwell.cif.connector.server.graphql.model.CustomerAddressInput;
import com.rockwell.cif.connector.server.graphql.model.CustomerInput;
import com.rockwell.cif.connector.server.graphql.model.CustomerOutput;
import com.rockwell.cif.connector.server.graphql.model.CustomerToken;
import com.rockwell.cif.connector.server.graphql.model.DeletePaymentTokenOutput;
import com.rockwell.cif.connector.server.graphql.model.PayflowProResponseInput;
import com.rockwell.cif.connector.server.graphql.model.PayflowProResponseOutput;
import com.rockwell.cif.connector.server.graphql.model.PayflowProTokenInput;
import com.rockwell.cif.connector.server.graphql.model.PaypalExpressTokenInput;
import com.rockwell.cif.connector.server.graphql.model.PaypalExpressTokenOutput;
import com.rockwell.cif.connector.server.graphql.model.PlaceOrderInput;
import com.rockwell.cif.connector.server.graphql.model.PlaceOrderOutput;
import com.rockwell.cif.connector.server.graphql.model.RemoveCouponFromCartInput;
import com.rockwell.cif.connector.server.graphql.model.RemoveCouponFromCartOutput;
import com.rockwell.cif.connector.server.graphql.model.RemoveItemFromCartInput;
import com.rockwell.cif.connector.server.graphql.model.RemoveItemFromCartOutput;
import com.rockwell.cif.connector.server.graphql.model.RevokeCustomerTokenOutput;
import com.rockwell.cif.connector.server.graphql.model.SendEmailToFriendInput;
import com.rockwell.cif.connector.server.graphql.model.SendEmailToFriendOutput;
import com.rockwell.cif.connector.server.graphql.model.SetBillingAddressOnCartInput;
import com.rockwell.cif.connector.server.graphql.model.SetBillingAddressOnCartOutput;
import com.rockwell.cif.connector.server.graphql.model.SetGuestEmailOnCartInput;
import com.rockwell.cif.connector.server.graphql.model.SetGuestEmailOnCartOutput;
import com.rockwell.cif.connector.server.graphql.model.SetPaymentMethodAndPlaceOrderInput;
import com.rockwell.cif.connector.server.graphql.model.SetPaymentMethodOnCartInput;
import com.rockwell.cif.connector.server.graphql.model.SetPaymentMethodOnCartOutput;
import com.rockwell.cif.connector.server.graphql.model.SetShippingAddressesOnCartInput;
import com.rockwell.cif.connector.server.graphql.model.SetShippingAddressesOnCartOutput;
import com.rockwell.cif.connector.server.graphql.model.SetShippingMethodsOnCartInput;
import com.rockwell.cif.connector.server.graphql.model.SetShippingMethodsOnCartOutput;
import com.rockwell.cif.connector.server.graphql.model.UpdateCartItemsInput;
import com.rockwell.cif.connector.server.graphql.model.UpdateCartItemsOutput;
import com.rockwell.cif.connector.server.graphql.model.createEmptyCartInput;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
public interface DataFetchersDelegateMutation {
	
	/**
	 * This method loads the data for Mutation.addBundleProductsToCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AddBundleProductsToCartOutput addBundleProductsToCart(DataFetchingEnvironment dataFetchingEnvironment, AddBundleProductsToCartInput  input);

	/**
	 * This method loads the data for Mutation.addConfigurableProductsToCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AddConfigurableProductsToCartOutput addConfigurableProductsToCart(DataFetchingEnvironment dataFetchingEnvironment, AddConfigurableProductsToCartInput  input);

	/**
	 * This method loads the data for Mutation.addDownloadableProductsToCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AddDownloadableProductsToCartOutput addDownloadableProductsToCart(DataFetchingEnvironment dataFetchingEnvironment, AddDownloadableProductsToCartInput  input);

	/**
	 * This method loads the data for Mutation.addSimpleProductsToCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AddSimpleProductsToCartOutput addSimpleProductsToCart(DataFetchingEnvironment dataFetchingEnvironment, AddSimpleProductsToCartInput  input);

	/**
	 * This method loads the data for Mutation.addVirtualProductsToCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public AddVirtualProductsToCartOutput addVirtualProductsToCart(DataFetchingEnvironment dataFetchingEnvironment, AddVirtualProductsToCartInput  input);

	/**
	 * This method loads the data for Mutation.applyCouponToCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public ApplyCouponToCartOutput applyCouponToCart(DataFetchingEnvironment dataFetchingEnvironment, ApplyCouponToCartInput  input);

	/**
	 * This method loads the data for Mutation.changeCustomerPassword. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param currentPassword 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param newPassword 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Customer changeCustomerPassword(DataFetchingEnvironment dataFetchingEnvironment, String  currentPassword, String  newPassword);

	/**
	 * This method loads the data for Mutation.createBraintreeClientToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public String createBraintreeClientToken(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Mutation.createCustomer. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerOutput createCustomer(DataFetchingEnvironment dataFetchingEnvironment, CustomerInput input);

	/**
	 * This method loads the data for Mutation.createCustomerAddress. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerAddress createCustomerAddress(DataFetchingEnvironment dataFetchingEnvironment, CustomerAddressInput input);

	/**
	 * This method loads the data for Mutation.createEmptyCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public String createEmptyCart(DataFetchingEnvironment dataFetchingEnvironment, createEmptyCartInput  input);

	/**
	 * This method loads the data for Mutation.createPayflowProToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CreatePayflowProTokenOutput createPayflowProToken(DataFetchingEnvironment dataFetchingEnvironment, PayflowProTokenInput  input);

	/**
	 * This method loads the data for Mutation.createPaypalExpressToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public PaypalExpressTokenOutput createPaypalExpressToken(DataFetchingEnvironment dataFetchingEnvironment, PaypalExpressTokenInput  input);

	/**
	 * This method loads the data for Mutation.deleteCustomerAddress. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Boolean deleteCustomerAddress(DataFetchingEnvironment dataFetchingEnvironment, Integer  id);

	/**
	 * This method loads the data for Mutation.deletePaymentToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param public_hash 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public DeletePaymentTokenOutput deletePaymentToken(DataFetchingEnvironment dataFetchingEnvironment, String  public_hash);

	/**
	 * This method loads the data for Mutation.generateCustomerToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param email 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param password 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerToken generateCustomerToken(DataFetchingEnvironment dataFetchingEnvironment, String  email, String  password);

	/**
	 * This method loads the data for Mutation.handlePayflowProResponse. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public PayflowProResponseOutput handlePayflowProResponse(DataFetchingEnvironment dataFetchingEnvironment, PayflowProResponseInput  input);

	/**
	 * This method loads the data for Mutation.mergeCarts. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param source_cart_id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param destination_cart_id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public Cart mergeCarts(DataFetchingEnvironment dataFetchingEnvironment, String  source_cart_id, String  destination_cart_id);

	/**
	 * This method loads the data for Mutation.placeOrder. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public PlaceOrderOutput placeOrder(DataFetchingEnvironment dataFetchingEnvironment, PlaceOrderInput  input);

	/**
	 * This method loads the data for Mutation.removeCouponFromCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public RemoveCouponFromCartOutput removeCouponFromCart(DataFetchingEnvironment dataFetchingEnvironment, RemoveCouponFromCartInput  input);

	/**
	 * This method loads the data for Mutation.removeItemFromCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public RemoveItemFromCartOutput removeItemFromCart(DataFetchingEnvironment dataFetchingEnvironment, RemoveItemFromCartInput  input);

	/**
	 * This method loads the data for Mutation.revokeCustomerToken. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public RevokeCustomerTokenOutput revokeCustomerToken(DataFetchingEnvironment dataFetchingEnvironment);

	/**
	 * This method loads the data for Mutation.sendEmailToFriend. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public SendEmailToFriendOutput sendEmailToFriend(DataFetchingEnvironment dataFetchingEnvironment, SendEmailToFriendInput  input);

	/**
	 * This method loads the data for Mutation.setBillingAddressOnCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public SetBillingAddressOnCartOutput setBillingAddressOnCart(DataFetchingEnvironment dataFetchingEnvironment, SetBillingAddressOnCartInput  input);

	/**
	 * This method loads the data for Mutation.setGuestEmailOnCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public SetGuestEmailOnCartOutput setGuestEmailOnCart(DataFetchingEnvironment dataFetchingEnvironment, SetGuestEmailOnCartInput  input);

	/**
	 * This method loads the data for Mutation.setPaymentMethodAndPlaceOrder. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public PlaceOrderOutput setPaymentMethodAndPlaceOrder(DataFetchingEnvironment dataFetchingEnvironment, SetPaymentMethodAndPlaceOrderInput  input);

	/**
	 * This method loads the data for Mutation.setPaymentMethodOnCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public SetPaymentMethodOnCartOutput setPaymentMethodOnCart(DataFetchingEnvironment dataFetchingEnvironment, SetPaymentMethodOnCartInput  input);

	/**
	 * This method loads the data for Mutation.setShippingAddressesOnCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public SetShippingAddressesOnCartOutput setShippingAddressesOnCart(DataFetchingEnvironment dataFetchingEnvironment, SetShippingAddressesOnCartInput  input);

	/**
	 * This method loads the data for Mutation.setShippingMethodsOnCart. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public SetShippingMethodsOnCartOutput setShippingMethodsOnCart(DataFetchingEnvironment dataFetchingEnvironment, SetShippingMethodsOnCartInput  input);

	/**
	 * This method loads the data for Mutation.updateCartItems. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public UpdateCartItemsOutput updateCartItems(DataFetchingEnvironment dataFetchingEnvironment, UpdateCartItemsInput  input);

	/**
	 * This method loads the data for Mutation.updateCustomer. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerOutput updateCustomer(DataFetchingEnvironment dataFetchingEnvironment, CustomerInput  input);

	/**
	 * This method loads the data for Mutation.updateCustomerAddress. 
	 * <BR/>
	 * <BR/>
	 * 
	 * @param dataFetchingEnvironment 
	 *     The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this DataFetcher
	 * @param id 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @param input 
	 *     The input parameter sent in the query by the GraphQL consumer, as defined in the GraphQL schema.
	 * @throws NoSuchElementException 
	 *     This method may return a {@link NoSuchElementException} exception. In this case, the exception is trapped 
	 *     by the calling method, and the return is consider as null. This allows to use the {@link Optional#get()} method directly, without caring of 
	 *     whether or not there is a value. The generated code will take care of the {@link NoSuchElementException} exception. 
	 */
	public CustomerAddress updateCustomerAddress(DataFetchingEnvironment dataFetchingEnvironment, Integer  id, CustomerAddressInput  input);

}
