/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("SortFields")
public class SortFields  {

	public SortFields(){
		// No action
	}

	@GraphQLScalar(fieldName = "default", graphQLTypeName = "String", javaClass = String.class)
	String _default;


	@GraphQLNonScalar(fieldName = "options", graphQLTypeName = "SortField", javaClass = SortField.class)
	List<SortField> options;



	public void setDefault(String _default) {
		this._default = _default;
	}

	public String getDefault() {
		return _default;
	}

	public void setOptions(List<SortField> options) {
		this.options = options;
	}

	public List<SortField> getOptions() {
		return options;
	}

    public String toString() {
        return "SortFields {"
				+ "_default: " + _default
				+ ", "
				+ "options: " + options
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Default("default"),
		Options("options");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String _default;
		private List<SortField> options;


		public Builder withDefault(String _default) {
			this._default = _default;
			return this;
		}
		public Builder withOptions(List<SortField> options) {
			this.options = options;
			return this;
		}

		public SortFields build() {
			SortFields _object = new SortFields();
			_object.setDefault(_default);
			_object.setOptions(options);
			return _object;
		}
	}
}
