/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("ExchangeRate")
public class ExchangeRate  {

	public ExchangeRate(){
		// No action
	}

	@GraphQLScalar(fieldName = "currency_to", graphQLTypeName = "String", javaClass = String.class)
	String currency_to;


	@GraphQLScalar(fieldName = "rate", graphQLTypeName = "Float", javaClass = Double.class)
	Double rate;



	public void setCurrency_to(String currency_to) {
		this.currency_to = currency_to;
	}

	public String getCurrency_to() {
		return currency_to;
	}

	public void setRate(Double rate) {
		this.rate = rate;
	}

	public Double getRate() {
		return rate;
	}

    public String toString() {
        return "ExchangeRate {"
				+ "currency_to: " + currency_to
				+ ", "
				+ "rate: " + rate
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Currency_to("currency_to"),
		Rate("rate");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String currency_to;
		private Double rate;


		public Builder withCurrency_to(String currency_to) {
			this.currency_to = currency_to;
			return this;
		}
		public Builder withRate(Double rate) {
			this.rate = rate;
			return this;
		}

		public ExchangeRate build() {
			ExchangeRate _object = new ExchangeRate();
			_object.setCurrency_to(currency_to);
			_object.setRate(rate);
			return _object;
		}
	}
}
