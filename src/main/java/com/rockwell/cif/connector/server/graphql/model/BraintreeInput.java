/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("BraintreeInput")
public class BraintreeInput  {

	public BraintreeInput(){
		// No action
	}

	@GraphQLScalar(fieldName = "device_data", graphQLTypeName = "String", javaClass = String.class)
	String device_data;


	@GraphQLScalar(fieldName = "is_active_payment_token_enabler", graphQLTypeName = "Boolean", javaClass = Boolean.class)
	Boolean is_active_payment_token_enabler;


	@GraphQLScalar(fieldName = "payment_method_nonce", graphQLTypeName = "String", javaClass = String.class)
	String payment_method_nonce;



	public void setDevice_data(String device_data) {
		this.device_data = device_data;
	}

	public String getDevice_data() {
		return device_data;
	}

	public void setIs_active_payment_token_enabler(Boolean is_active_payment_token_enabler) {
		this.is_active_payment_token_enabler = is_active_payment_token_enabler;
	}

	public Boolean getIs_active_payment_token_enabler() {
		return is_active_payment_token_enabler;
	}

	public void setPayment_method_nonce(String payment_method_nonce) {
		this.payment_method_nonce = payment_method_nonce;
	}

	public String getPayment_method_nonce() {
		return payment_method_nonce;
	}

    public String toString() {
        return "BraintreeInput {"
				+ "device_data: " + device_data
				+ ", "
				+ "is_active_payment_token_enabler: " + is_active_payment_token_enabler
				+ ", "
				+ "payment_method_nonce: " + payment_method_nonce
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Device_data("device_data"),
		Is_active_payment_token_enabler("is_active_payment_token_enabler"),
		Payment_method_nonce("payment_method_nonce");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String device_data;
		private Boolean is_active_payment_token_enabler;
		private String payment_method_nonce;


		public Builder withDevice_data(String device_data) {
			this.device_data = device_data;
			return this;
		}
		public Builder withIs_active_payment_token_enabler(Boolean is_active_payment_token_enabler) {
			this.is_active_payment_token_enabler = is_active_payment_token_enabler;
			return this;
		}
		public Builder withPayment_method_nonce(String payment_method_nonce) {
			this.payment_method_nonce = payment_method_nonce;
			return this;
		}

		public BraintreeInput build() {
			BraintreeInput _object = new BraintreeInput();
			_object.setDevice_data(device_data);
			_object.setIs_active_payment_token_enabler(is_active_payment_token_enabler);
			_object.setPayment_method_nonce(payment_method_nonce);
			return _object;
		}
	}
}
