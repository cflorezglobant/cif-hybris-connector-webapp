/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("CategoryFilterInput")
public class CategoryFilterInput  {

	public CategoryFilterInput(){
		// No action
	}

	@GraphQLNonScalar(fieldName = "ids", graphQLTypeName = "FilterEqualTypeInput", javaClass = FilterEqualTypeInput.class)
	FilterEqualTypeInput ids;


	@GraphQLNonScalar(fieldName = "name", graphQLTypeName = "FilterMatchTypeInput", javaClass = FilterMatchTypeInput.class)
	FilterMatchTypeInput name;


	@GraphQLNonScalar(fieldName = "url_key", graphQLTypeName = "FilterEqualTypeInput", javaClass = FilterEqualTypeInput.class)
	FilterEqualTypeInput url_key;



	public void setIds(FilterEqualTypeInput ids) {
		this.ids = ids;
	}

	public FilterEqualTypeInput getIds() {
		return ids;
	}

	public void setName(FilterMatchTypeInput name) {
		this.name = name;
	}

	public FilterMatchTypeInput getName() {
		return name;
	}

	public void setUrl_key(FilterEqualTypeInput url_key) {
		this.url_key = url_key;
	}

	public FilterEqualTypeInput getUrl_key() {
		return url_key;
	}

    public String toString() {
        return "CategoryFilterInput {"
				+ "ids: " + ids
				+ ", "
				+ "name: " + name
				+ ", "
				+ "url_key: " + url_key
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Ids("ids"),
		Name("name"),
		Url_key("url_key");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private FilterEqualTypeInput ids;
		private FilterMatchTypeInput name;
		private FilterEqualTypeInput url_key;


		public Builder withIds(FilterEqualTypeInput ids) {
			this.ids = ids;
			return this;
		}
		public Builder withName(FilterMatchTypeInput name) {
			this.name = name;
			return this;
		}
		public Builder withUrl_key(FilterEqualTypeInput url_key) {
			this.url_key = url_key;
			return this;
		}

		public CategoryFilterInput build() {
			CategoryFilterInput _object = new CategoryFilterInput();
			_object.setIds(ids);
			_object.setName(name);
			_object.setUrl_key(url_key);
			return _object;
		}
	}
}
