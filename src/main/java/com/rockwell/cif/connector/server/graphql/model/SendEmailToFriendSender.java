/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("SendEmailToFriendSender")
public class SendEmailToFriendSender  {

	public SendEmailToFriendSender(){
		// No action
	}

	@GraphQLScalar(fieldName = "email", graphQLTypeName = "String", javaClass = String.class)
	String email;


	@GraphQLScalar(fieldName = "message", graphQLTypeName = "String", javaClass = String.class)
	String message;


	@GraphQLScalar(fieldName = "name", graphQLTypeName = "String", javaClass = String.class)
	String name;



	public void setEmail(String email) {
		this.email = email;
	}

	public String getEmail() {
		return email;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

    public String toString() {
        return "SendEmailToFriendSender {"
				+ "email: " + email
				+ ", "
				+ "message: " + message
				+ ", "
				+ "name: " + name
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Email("email"),
		Message("message"),
		Name("name");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String email;
		private String message;
		private String name;


		public Builder withEmail(String email) {
			this.email = email;
			return this;
		}
		public Builder withMessage(String message) {
			this.message = message;
			return this;
		}
		public Builder withName(String name) {
			this.name = name;
			return this;
		}

		public SendEmailToFriendSender build() {
			SendEmailToFriendSender _object = new SendEmailToFriendSender();
			_object.setEmail(email);
			_object.setMessage(message);
			_object.setName(name);
			return _object;
		}
	}
}
