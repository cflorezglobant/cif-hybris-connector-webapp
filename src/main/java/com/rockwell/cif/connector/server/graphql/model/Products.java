/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Products")
public class Products  {

	public Products(){
		// No action
	}

	@GraphQLNonScalar(fieldName = "aggregations", graphQLTypeName = "Aggregation", javaClass = Aggregation.class)
	List<Aggregation> aggregations;


	@GraphQLNonScalar(fieldName = "filters", graphQLTypeName = "LayerFilter", javaClass = LayerFilter.class)
	List<LayerFilter> filters;


	@GraphQLNonScalar(fieldName = "items", graphQLTypeName = "ProductInterface", javaClass = ProductInterface.class)
	List<ProductInterface> items;


	@GraphQLNonScalar(fieldName = "page_info", graphQLTypeName = "SearchResultPageInfo", javaClass = SearchResultPageInfo.class)
	SearchResultPageInfo page_info;


	@GraphQLNonScalar(fieldName = "sort_fields", graphQLTypeName = "SortFields", javaClass = SortFields.class)
	SortFields sort_fields;


	@GraphQLScalar(fieldName = "total_count", graphQLTypeName = "Int", javaClass = Integer.class)
	Integer total_count;



	public void setAggregations(List<Aggregation> aggregations) {
		this.aggregations = aggregations;
	}

	public List<Aggregation> getAggregations() {
		return aggregations;
	}

	public void setFilters(List<LayerFilter> filters) {
		this.filters = filters;
	}

	public List<LayerFilter> getFilters() {
		return filters;
	}

	public void setItems(List<ProductInterface> items) {
		this.items = items;
	}

	public List<ProductInterface> getItems() {
		return items;
	}

	public void setPage_info(SearchResultPageInfo page_info) {
		this.page_info = page_info;
	}

	public SearchResultPageInfo getPage_info() {
		return page_info;
	}

	public void setSort_fields(SortFields sort_fields) {
		this.sort_fields = sort_fields;
	}

	public SortFields getSort_fields() {
		return sort_fields;
	}

	public void setTotal_count(Integer total_count) {
		this.total_count = total_count;
	}

	public Integer getTotal_count() {
		return total_count;
	}

    public String toString() {
        return "Products {"
				+ "aggregations: " + aggregations
				+ ", "
				+ "filters: " + filters
				+ ", "
				+ "items: " + items
				+ ", "
				+ "page_info: " + page_info
				+ ", "
				+ "sort_fields: " + sort_fields
				+ ", "
				+ "total_count: " + total_count
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Aggregations("aggregations"),
		Filters("filters"),
		Items("items"),
		Page_info("page_info"),
		Sort_fields("sort_fields"),
		Total_count("total_count");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private List<Aggregation> aggregations;
		private List<LayerFilter> filters;
		private List<ProductInterface> items;
		private SearchResultPageInfo page_info;
		private SortFields sort_fields;
		private Integer total_count;


		public Builder withAggregations(List<Aggregation> aggregations) {
			this.aggregations = aggregations;
			return this;
		}
		public Builder withFilters(List<LayerFilter> filters) {
			this.filters = filters;
			return this;
		}
		public Builder withItems(List<ProductInterface> items) {
			this.items = items;
			return this;
		}
		public Builder withPage_info(SearchResultPageInfo page_info) {
			this.page_info = page_info;
			return this;
		}
		public Builder withSort_fields(SortFields sort_fields) {
			this.sort_fields = sort_fields;
			return this;
		}
		public Builder withTotal_count(Integer total_count) {
			this.total_count = total_count;
			return this;
		}

		public Products build() {
			Products _object = new Products();
			_object.setAggregations(aggregations);
			_object.setFilters(filters);
			_object.setItems(items);
			_object.setPage_info(page_info);
			_object.setSort_fields(sort_fields);
			_object.setTotal_count(total_count);
			return _object;
		}
	}
}
