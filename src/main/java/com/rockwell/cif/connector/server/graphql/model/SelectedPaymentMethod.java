/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("SelectedPaymentMethod")
public class SelectedPaymentMethod  {

	public SelectedPaymentMethod(){
		// No action
	}

	@GraphQLScalar(fieldName = "code", graphQLTypeName = "String", javaClass = String.class)
	String code;


	@GraphQLScalar(fieldName = "purchase_order_number", graphQLTypeName = "String", javaClass = String.class)
	String purchase_order_number;


	@GraphQLScalar(fieldName = "title", graphQLTypeName = "String", javaClass = String.class)
	String title;



	public void setCode(String code) {
		this.code = code;
	}

	public String getCode() {
		return code;
	}

	public void setPurchase_order_number(String purchase_order_number) {
		this.purchase_order_number = purchase_order_number;
	}

	public String getPurchase_order_number() {
		return purchase_order_number;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getTitle() {
		return title;
	}

    public String toString() {
        return "SelectedPaymentMethod {"
				+ "code: " + code
				+ ", "
				+ "purchase_order_number: " + purchase_order_number
				+ ", "
				+ "title: " + title
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Code("code"),
		Purchase_order_number("purchase_order_number"),
		Title("title");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String code;
		private String purchase_order_number;
		private String title;


		public Builder withCode(String code) {
			this.code = code;
			return this;
		}
		public Builder withPurchase_order_number(String purchase_order_number) {
			this.purchase_order_number = purchase_order_number;
			return this;
		}
		public Builder withTitle(String title) {
			this.title = title;
			return this;
		}

		public SelectedPaymentMethod build() {
			SelectedPaymentMethod _object = new SelectedPaymentMethod();
			_object.setCode(code);
			_object.setPurchase_order_number(purchase_order_number);
			_object.setTitle(title);
			return _object;
		}
	}
}
