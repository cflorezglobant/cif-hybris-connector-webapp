/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Money")
public class Money  {

	public Money(){
		// No action
	}

	public Money(CurrencyEnum currency, Double value) {
		this.currency = currency;
		this.value = value;
	}

	@GraphQLScalar(fieldName = "currency", graphQLTypeName = "CurrencyEnum", javaClass = CurrencyEnum.class)
	CurrencyEnum currency;


	@GraphQLScalar(fieldName = "value", graphQLTypeName = "Float", javaClass = Double.class)
	Double value;



	public void setCurrency(CurrencyEnum currency) {
		this.currency = currency;
	}

	public CurrencyEnum getCurrency() {
		return currency;
	}

	public void setValue(Double value) {
		this.value = value;
	}

	public Double getValue() {
		return value;
	}

    public String toString() {
        return "Money {"
				+ "currency: " + currency
				+ ", "
				+ "value: " + value
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Currency("currency"),
		Value("value");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private CurrencyEnum currency;
		private Double value;


		public Builder withCurrency(CurrencyEnum currency) {
			this.currency = currency;
			return this;
		}
		public Builder withValue(Double value) {
			this.value = value;
			return this;
		}

		public Money build() {
			Money _object = new Money();
			_object.setCurrency(currency);
			_object.setValue(value);
			return _object;
		}
	}
}
