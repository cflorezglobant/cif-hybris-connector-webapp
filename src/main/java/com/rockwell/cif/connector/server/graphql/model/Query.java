/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Query")
public class Query  {

	public Query(){
		// No action
	}

	@GraphQLNonScalar(fieldName = "cart", graphQLTypeName = "Cart", javaClass = Cart.class)
	Cart cart;


	@GraphQLNonScalar(fieldName = "category", graphQLTypeName = "CategoryTree", javaClass = CategoryTree.class)
	CategoryTree category;


	@GraphQLNonScalar(fieldName = "categoryList", graphQLTypeName = "CategoryTree", javaClass = CategoryTree.class)
	List<CategoryTree> categoryList;


	@GraphQLNonScalar(fieldName = "checkoutAgreements", graphQLTypeName = "CheckoutAgreement", javaClass = CheckoutAgreement.class)
	List<CheckoutAgreement> checkoutAgreements;


	@GraphQLNonScalar(fieldName = "cmsBlocks", graphQLTypeName = "CmsBlocks", javaClass = CmsBlocks.class)
	CmsBlocks cmsBlocks;


	@GraphQLNonScalar(fieldName = "cmsPage", graphQLTypeName = "CmsPage", javaClass = CmsPage.class)
	CmsPage cmsPage;


	@GraphQLNonScalar(fieldName = "countries", graphQLTypeName = "Country", javaClass = Country.class)
	List<Country> countries;


	@GraphQLNonScalar(fieldName = "country", graphQLTypeName = "Country", javaClass = Country.class)
	Country country;


	@GraphQLNonScalar(fieldName = "currency", graphQLTypeName = "Currency", javaClass = Currency.class)
	Currency currency;


	@GraphQLNonScalar(fieldName = "customAttributeMetadata", graphQLTypeName = "CustomAttributeMetadata", javaClass = CustomAttributeMetadata.class)
	CustomAttributeMetadata customAttributeMetadata;


	@GraphQLNonScalar(fieldName = "customer", graphQLTypeName = "Customer", javaClass = Customer.class)
	Customer customer;


	@GraphQLNonScalar(fieldName = "customerCart", graphQLTypeName = "Cart", javaClass = Cart.class)
	Cart customerCart;


	@GraphQLNonScalar(fieldName = "customerDownloadableProducts", graphQLTypeName = "CustomerDownloadableProducts", javaClass = CustomerDownloadableProducts.class)
	CustomerDownloadableProducts customerDownloadableProducts;


	@GraphQLNonScalar(fieldName = "customerOrders", graphQLTypeName = "CustomerOrders", javaClass = CustomerOrders.class)
	CustomerOrders customerOrders;


	@GraphQLNonScalar(fieldName = "customerPaymentTokens", graphQLTypeName = "CustomerPaymentTokens", javaClass = CustomerPaymentTokens.class)
	CustomerPaymentTokens customerPaymentTokens;


	@GraphQLNonScalar(fieldName = "getHostedProUrl", graphQLTypeName = "HostedProUrl", javaClass = HostedProUrl.class)
	HostedProUrl getHostedProUrl;


	@GraphQLNonScalar(fieldName = "getPayflowLinkToken", graphQLTypeName = "PayflowLinkToken", javaClass = PayflowLinkToken.class)
	PayflowLinkToken getPayflowLinkToken;


	@GraphQLNonScalar(fieldName = "isEmailAvailable", graphQLTypeName = "IsEmailAvailableOutput", javaClass = IsEmailAvailableOutput.class)
	IsEmailAvailableOutput isEmailAvailable;


	@GraphQLNonScalar(fieldName = "products", graphQLTypeName = "Products", javaClass = Products.class)
	Products products;


	@GraphQLNonScalar(fieldName = "storeConfig", graphQLTypeName = "StoreConfig", javaClass = StoreConfig.class)
	StoreConfig storeConfig;


	@GraphQLNonScalar(fieldName = "urlResolver", graphQLTypeName = "EntityUrl", javaClass = EntityUrl.class)
	EntityUrl urlResolver;


	@GraphQLNonScalar(fieldName = "wishlist", graphQLTypeName = "WishlistOutput", javaClass = WishlistOutput.class)
	WishlistOutput wishlist;



	public void setCart(Cart cart) {
		this.cart = cart;
	}

	public Cart getCart() {
		return cart;
	}

	public void setCategory(CategoryTree category) {
		this.category = category;
	}

	public CategoryTree getCategory() {
		return category;
	}

	public void setCategoryList(List<CategoryTree> categoryList) {
		this.categoryList = categoryList;
	}

	public List<CategoryTree> getCategoryList() {
		return categoryList;
	}

	public void setCheckoutAgreements(List<CheckoutAgreement> checkoutAgreements) {
		this.checkoutAgreements = checkoutAgreements;
	}

	public List<CheckoutAgreement> getCheckoutAgreements() {
		return checkoutAgreements;
	}

	public void setCmsBlocks(CmsBlocks cmsBlocks) {
		this.cmsBlocks = cmsBlocks;
	}

	public CmsBlocks getCmsBlocks() {
		return cmsBlocks;
	}

	public void setCmsPage(CmsPage cmsPage) {
		this.cmsPage = cmsPage;
	}

	public CmsPage getCmsPage() {
		return cmsPage;
	}

	public void setCountries(List<Country> countries) {
		this.countries = countries;
	}

	public List<Country> getCountries() {
		return countries;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	public Country getCountry() {
		return country;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	public Currency getCurrency() {
		return currency;
	}

	public void setCustomAttributeMetadata(CustomAttributeMetadata customAttributeMetadata) {
		this.customAttributeMetadata = customAttributeMetadata;
	}

	public CustomAttributeMetadata getCustomAttributeMetadata() {
		return customAttributeMetadata;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomerCart(Cart customerCart) {
		this.customerCart = customerCart;
	}

	public Cart getCustomerCart() {
		return customerCart;
	}

	public void setCustomerDownloadableProducts(CustomerDownloadableProducts customerDownloadableProducts) {
		this.customerDownloadableProducts = customerDownloadableProducts;
	}

	public CustomerDownloadableProducts getCustomerDownloadableProducts() {
		return customerDownloadableProducts;
	}

	public void setCustomerOrders(CustomerOrders customerOrders) {
		this.customerOrders = customerOrders;
	}

	public CustomerOrders getCustomerOrders() {
		return customerOrders;
	}

	public void setCustomerPaymentTokens(CustomerPaymentTokens customerPaymentTokens) {
		this.customerPaymentTokens = customerPaymentTokens;
	}

	public CustomerPaymentTokens getCustomerPaymentTokens() {
		return customerPaymentTokens;
	}

	public void setGetHostedProUrl(HostedProUrl getHostedProUrl) {
		this.getHostedProUrl = getHostedProUrl;
	}

	public HostedProUrl getGetHostedProUrl() {
		return getHostedProUrl;
	}

	public void setGetPayflowLinkToken(PayflowLinkToken getPayflowLinkToken) {
		this.getPayflowLinkToken = getPayflowLinkToken;
	}

	public PayflowLinkToken getGetPayflowLinkToken() {
		return getPayflowLinkToken;
	}

	public void setIsEmailAvailable(IsEmailAvailableOutput isEmailAvailable) {
		this.isEmailAvailable = isEmailAvailable;
	}

	public IsEmailAvailableOutput getIsEmailAvailable() {
		return isEmailAvailable;
	}

	public void setProducts(Products products) {
		this.products = products;
	}

	public Products getProducts() {
		return products;
	}

	public void setStoreConfig(StoreConfig storeConfig) {
		this.storeConfig = storeConfig;
	}

	public StoreConfig getStoreConfig() {
		return storeConfig;
	}

	public void setUrlResolver(EntityUrl urlResolver) {
		this.urlResolver = urlResolver;
	}

	public EntityUrl getUrlResolver() {
		return urlResolver;
	}

	public void setWishlist(WishlistOutput wishlist) {
		this.wishlist = wishlist;
	}

	public WishlistOutput getWishlist() {
		return wishlist;
	}

    public String toString() {
        return "Query {"
				+ "cart: " + cart
				+ ", "
				+ "category: " + category
				+ ", "
				+ "categoryList: " + categoryList
				+ ", "
				+ "checkoutAgreements: " + checkoutAgreements
				+ ", "
				+ "cmsBlocks: " + cmsBlocks
				+ ", "
				+ "cmsPage: " + cmsPage
				+ ", "
				+ "countries: " + countries
				+ ", "
				+ "country: " + country
				+ ", "
				+ "currency: " + currency
				+ ", "
				+ "customAttributeMetadata: " + customAttributeMetadata
				+ ", "
				+ "customer: " + customer
				+ ", "
				+ "customerCart: " + customerCart
				+ ", "
				+ "customerDownloadableProducts: " + customerDownloadableProducts
				+ ", "
				+ "customerOrders: " + customerOrders
				+ ", "
				+ "customerPaymentTokens: " + customerPaymentTokens
				+ ", "
				+ "getHostedProUrl: " + getHostedProUrl
				+ ", "
				+ "getPayflowLinkToken: " + getPayflowLinkToken
				+ ", "
				+ "isEmailAvailable: " + isEmailAvailable
				+ ", "
				+ "products: " + products
				+ ", "
				+ "storeConfig: " + storeConfig
				+ ", "
				+ "urlResolver: " + urlResolver
				+ ", "
				+ "wishlist: " + wishlist
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Cart("cart"),
		Category("category"),
		CategoryList("categoryList"),
		CheckoutAgreements("checkoutAgreements"),
		CmsBlocks("cmsBlocks"),
		CmsPage("cmsPage"),
		Countries("countries"),
		Country("country"),
		Currency("currency"),
		CustomAttributeMetadata("customAttributeMetadata"),
		Customer("customer"),
		CustomerCart("customerCart"),
		CustomerDownloadableProducts("customerDownloadableProducts"),
		CustomerOrders("customerOrders"),
		CustomerPaymentTokens("customerPaymentTokens"),
		GetHostedProUrl("getHostedProUrl"),
		GetPayflowLinkToken("getPayflowLinkToken"),
		IsEmailAvailable("isEmailAvailable"),
		Products("products"),
		StoreConfig("storeConfig"),
		UrlResolver("urlResolver"),
		Wishlist("wishlist");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private Cart cart;
		private CategoryTree category;
		private List<CategoryTree> categoryList;
		private List<CheckoutAgreement> checkoutAgreements;
		private CmsBlocks cmsBlocks;
		private CmsPage cmsPage;
		private List<Country> countries;
		private Country country;
		private Currency currency;
		private CustomAttributeMetadata customAttributeMetadata;
		private Customer customer;
		private Cart customerCart;
		private CustomerDownloadableProducts customerDownloadableProducts;
		private CustomerOrders customerOrders;
		private CustomerPaymentTokens customerPaymentTokens;
		private HostedProUrl getHostedProUrl;
		private PayflowLinkToken getPayflowLinkToken;
		private IsEmailAvailableOutput isEmailAvailable;
		private Products products;
		private StoreConfig storeConfig;
		private EntityUrl urlResolver;
		private WishlistOutput wishlist;


		public Builder withCart(Cart cart) {
			this.cart = cart;
			return this;
		}
		public Builder withCategory(CategoryTree category) {
			this.category = category;
			return this;
		}
		public Builder withCategoryList(List<CategoryTree> categoryList) {
			this.categoryList = categoryList;
			return this;
		}
		public Builder withCheckoutAgreements(List<CheckoutAgreement> checkoutAgreements) {
			this.checkoutAgreements = checkoutAgreements;
			return this;
		}
		public Builder withCmsBlocks(CmsBlocks cmsBlocks) {
			this.cmsBlocks = cmsBlocks;
			return this;
		}
		public Builder withCmsPage(CmsPage cmsPage) {
			this.cmsPage = cmsPage;
			return this;
		}
		public Builder withCountries(List<Country> countries) {
			this.countries = countries;
			return this;
		}
		public Builder withCountry(Country country) {
			this.country = country;
			return this;
		}
		public Builder withCurrency(Currency currency) {
			this.currency = currency;
			return this;
		}
		public Builder withCustomAttributeMetadata(CustomAttributeMetadata customAttributeMetadata) {
			this.customAttributeMetadata = customAttributeMetadata;
			return this;
		}
		public Builder withCustomer(Customer customer) {
			this.customer = customer;
			return this;
		}
		public Builder withCustomerCart(Cart customerCart) {
			this.customerCart = customerCart;
			return this;
		}
		public Builder withCustomerDownloadableProducts(CustomerDownloadableProducts customerDownloadableProducts) {
			this.customerDownloadableProducts = customerDownloadableProducts;
			return this;
		}
		public Builder withCustomerOrders(CustomerOrders customerOrders) {
			this.customerOrders = customerOrders;
			return this;
		}
		public Builder withCustomerPaymentTokens(CustomerPaymentTokens customerPaymentTokens) {
			this.customerPaymentTokens = customerPaymentTokens;
			return this;
		}
		public Builder withGetHostedProUrl(HostedProUrl getHostedProUrl) {
			this.getHostedProUrl = getHostedProUrl;
			return this;
		}
		public Builder withGetPayflowLinkToken(PayflowLinkToken getPayflowLinkToken) {
			this.getPayflowLinkToken = getPayflowLinkToken;
			return this;
		}
		public Builder withIsEmailAvailable(IsEmailAvailableOutput isEmailAvailable) {
			this.isEmailAvailable = isEmailAvailable;
			return this;
		}
		public Builder withProducts(Products products) {
			this.products = products;
			return this;
		}
		public Builder withStoreConfig(StoreConfig storeConfig) {
			this.storeConfig = storeConfig;
			return this;
		}
		public Builder withUrlResolver(EntityUrl urlResolver) {
			this.urlResolver = urlResolver;
			return this;
		}
		public Builder withWishlist(WishlistOutput wishlist) {
			this.wishlist = wishlist;
			return this;
		}

		public Query build() {
			Query _object = new Query();
			_object.setCart(cart);
			_object.setCategory(category);
			_object.setCategoryList(categoryList);
			_object.setCheckoutAgreements(checkoutAgreements);
			_object.setCmsBlocks(cmsBlocks);
			_object.setCmsPage(cmsPage);
			_object.setCountries(countries);
			_object.setCountry(country);
			_object.setCurrency(currency);
			_object.setCustomAttributeMetadata(customAttributeMetadata);
			_object.setCustomer(customer);
			_object.setCustomerCart(customerCart);
			_object.setCustomerDownloadableProducts(customerDownloadableProducts);
			_object.setCustomerOrders(customerOrders);
			_object.setCustomerPaymentTokens(customerPaymentTokens);
			_object.setGetHostedProUrl(getHostedProUrl);
			_object.setGetPayflowLinkToken(getPayflowLinkToken);
			_object.setIsEmailAvailable(isEmailAvailable);
			_object.setProducts(products);
			_object.setStoreConfig(storeConfig);
			_object.setUrlResolver(urlResolver);
			_object.setWishlist(wishlist);
			return _object;
		}
	}
}
