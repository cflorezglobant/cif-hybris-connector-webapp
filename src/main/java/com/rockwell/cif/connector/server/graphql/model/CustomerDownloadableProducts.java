/** Generated by the default template from graphql-java-generator */
package com.rockwell.cif.connector.server.graphql.model;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("CustomerDownloadableProducts")
public class CustomerDownloadableProducts  {

	public CustomerDownloadableProducts(){
		// No action
	}

	@GraphQLNonScalar(fieldName = "items", graphQLTypeName = "CustomerDownloadableProduct", javaClass = CustomerDownloadableProduct.class)
	List<CustomerDownloadableProduct> items;



	public void setItems(List<CustomerDownloadableProduct> items) {
		this.items = items;
	}

	public List<CustomerDownloadableProduct> getItems() {
		return items;
	}

    public String toString() {
        return "CustomerDownloadableProducts {"
				+ "items: " + items
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Items("items");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private List<CustomerDownloadableProduct> items;


		public Builder withItems(List<CustomerDownloadableProduct> items) {
			this.items = items;
			return this;
		}

		public CustomerDownloadableProducts build() {
			CustomerDownloadableProducts _object = new CustomerDownloadableProducts();
			_object.setItems(items);
			return _object;
		}
	}
}
